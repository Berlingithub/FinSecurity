{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# replit.md\n\n## Overview\n\nSecureReceivables is a full-stack web application for receivables securitization and investment opportunities. The platform connects merchants who want to securitize their receivables with investors looking for investment opportunities. Users can register as either merchants or investors and access role-specific dashboards with tailored functionality.\n\n## Recent Changes (August 2025)\n\n### Production Deployment and Scalability Planning (January 2025)\n- Developed comprehensive production deployment strategy covering:\n  - Backend architecture recommendations (Node.js/Express with PostgreSQL)\n  - Multi-factor authentication and role-based access control implementation\n  - Real-time update system using WebSockets and Redis pub/sub\n  - Payment gateway integration with Stripe, KYC/AML compliance\n  - Legal document management with DocuSign and blockchain timestamping\n  - Microservices architecture for scalability and maintainability\n  - Security best practices including encryption, API protection, and monitoring\n  - Cloud deployment strategy using AWS with CI/CD pipelines\n  - Performance optimization through caching, load balancing, and CDN\n\n### UI/UX Enhancements and Polish (January 2025)\n- Enhanced visual design with improved typography, spacing, and color consistency\n- Added smooth animations and transitions throughout the application:\n  - Button hover effects with subtle scaling\n  - Card hover animations with shadow and translate effects\n  - Fade-in and slide-up animations for content loading\n  - Enhanced focus states for better accessibility\n- Implemented comprehensive loading states:\n  - Skeleton loading cards for data fetching\n  - Loading spinners with consistent sizing\n  - Button loading states with opacity and spinner indicators\n- Enhanced empty states across all sections:\n  - Reusable EmptyState component with icons, titles, and action buttons\n  - Context-aware messages based on filters and user state\n  - Actionable empty states that guide user behavior\n- Improved form validation with real-time feedback:\n  - Enhanced field validation with visual error/success states\n  - Better error messages and field-specific validation\n  - Improved input focus states and transitions\n- Responsive design improvements:\n  - Better mobile and tablet layouts with Tailwind responsive utilities\n  - Improved button and layout spacing for different screen sizes\n  - Enhanced grid layouts with proper responsive breakpoints\n- Enhanced component styling:\n  - Card hover effects and smooth transitions\n  - Better visual hierarchy with improved typography\n  - Consistent spacing and border radius throughout\n  - Custom scrollbar styling for better aesthetics\n\n### Merchant Receivables Management Module\n- Added comprehensive receivables creation and management system\n- Database schema updated with receivables table including merchant relations\n- Full CRUD API endpoints for receivables with proper authentication\n- Enhanced merchant dashboard with:\n  - Interactive receivables creation form with validation\n  - Real-time receivables listing with status badges\n  - Dynamic statistics based on actual data\n  - Bulk operations and individual receivable management\n- Form validation using Zod schemas for data integrity\n- Responsive UI with modal dialogs and loading states\n\n### Securitization and Marketplace Integration\n- Implemented complete securitization workflow for trade receivables\n- Added securities database table with comprehensive financial metadata\n- Enhanced receivables status tracking (draft → active → securitized → listed → purchased/sold)\n- Built securitization form with investment-specific fields:\n  - Security title and description for investor visibility\n  - Risk grading system (A to C- ratings)\n  - Expected return percentage calculations\n  - Investment duration specifications\n- Marketplace listing functionality for securitized assets\n- Status-based action buttons (Securitize → List for Sale → On Marketplace)\n- Real-time dashboard statistics including listed securities count\n- Public marketplace API endpoint for investor access\n- Comprehensive error handling and loading states throughout workflow\n\n### Investor Security Purchase System\n- Added comprehensive purchase functionality for listed securities\n- Enhanced securities schema with purchase tracking fields:\n  - purchasedBy field linking to investor ID\n  - purchasedAt timestamp for transaction recording\n  - Updated status enum to include \"purchased\" state\n- Built secure purchase API endpoints with role-based authorization\n- Implemented purchase confirmation modal with detailed security information\n- Added \"My Purchased Securities\" tab on investor dashboard showing owned investments\n- Purchase process automatically:\n  - Updates security status from \"listed\" to \"purchased\"\n  - Removes securities from public marketplace to prevent double-purchasing\n  - Updates related receivable status to \"sold\"\n  - Records investor ID and purchase timestamp\n- Real-time dashboard statistics reflecting both marketplace and purchased securities\n- Enhanced error handling for purchase conflicts and authorization\n\n### Payment Settlement and Wallet System\n- Implemented comprehensive wallet balance functionality for investors\n- Added walletBalance field to user schema with automatic migration\n- Built \"Mark as Paid\" functionality for merchants to process payments\n- Created payment settlement API endpoints with proper authorization\n- Enhanced investor dashboard with prominent wallet balance display\n- Automatic balance updates when merchants mark securities as paid\n- Complete payment lifecycle from receivable creation to final settlement\n\n### User Profile Management System\n- Enhanced user schema with profile fields (phoneNumber, address)\n- Created comprehensive Profile/Settings page accessible from both dashboards\n- Implemented client-side persistence using localStorage for profile data\n- Built profile management API endpoints with proper authorization\n- Features include:\n  - View and edit personal information (name, phone, address)\n  - Professional bank details placeholder section\n  - Form validation using Zod schemas\n  - Real-time profile updates with unsaved changes tracking\n  - Responsive design with clean navigation integration\n- Profile navigation integrated into both merchant and investor dashboards\n- Complete CRUD operations for user profile data with proper error handling\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Routing**: Wouter for lightweight client-side routing with role-based navigation\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design system\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API development\n- **Language**: TypeScript for type safety across the entire stack\n- **Authentication**: Replit Auth integration using OpenID Connect with Passport.js\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **API Design**: RESTful endpoints with structured error handling and request logging\n\n### Data Layer\n- **Database**: PostgreSQL with Neon serverless hosting for scalability\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: User management with role-based access control (merchant/investor roles)\n- **Validation**: Zod schemas shared between client and server for consistent data validation\n\n### Authentication & Authorization\n- **Provider**: Replit Auth with OpenID Connect protocol\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Role-Based Access**: User roles (merchant/investor) determine dashboard access and features\n- **Security**: HTTP-only cookies, CSRF protection, and secure session management\n\n### Development Environment\n- **Monorepo Structure**: Shared types and schemas between client and server\n- **Hot Reload**: Vite dev server with Express middleware integration\n- **TypeScript**: Strict type checking across the entire codebase\n- **Path Aliases**: Configured for clean import statements and better developer experience\n\n## External Dependencies\n\n### Authentication Services\n- **Replit Auth**: Primary authentication provider using OpenID Connect\n- **Passport.js**: Authentication middleware for Express.js integration\n\n### Database & Storage\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle Kit**: Database migration and schema management tools\n\n### UI & Styling\n- **shadcn/ui**: Pre-built accessible React components with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Build tool with development server and production optimization\n- **ESBuild**: Fast TypeScript compilation for server-side code\n- **TypeScript**: Type checking and compilation for both client and server\n\n### Runtime Dependencies\n- **React Query**: Server state management and caching\n- **Wouter**: Lightweight routing library for React\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema definition","size_bytes":9611},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // First check if user exists and has a role\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  \n  // Only set role to merchant if user doesn't exist or doesn't have a role\n  const userData: any = {\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  };\n  \n  // If user exists, preserve their existing role\n  // If user doesn't exist, set a default role of 'merchant'\n  if (existingUser?.role) {\n    userData.role = existingUser.role;\n  } else {\n    userData.role = 'merchant'; // Default role for new users\n  }\n  \n  await storage.upsertUser(userData);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4703},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { registerUserSchema, createReceivableSchema, createSecuritySchema } from \"@shared/schema\";\nimport { fromError } from \"zod-validation-error\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Registration route for users who want to complete their profile\n  app.post('/api/auth/register', isAuthenticated, async (req: any, res) => {\n    try {\n      const validation = registerUserSchema.safeParse(req.body);\n      if (!validation.success) {\n        const validationError = fromError(validation.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n\n      const { role, firstName, lastName, email } = validation.data;\n      const userId = req.user.claims.sub;\n\n      // Check if user already has a role assigned\n      const existingUser = await storage.getUser(userId);\n      if (existingUser && existingUser.role) {\n        return res.status(400).json({ message: \"User already has a role assigned\" });\n      }\n\n      // Update user with role and profile information\n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        email: email || req.user.claims.email,\n        firstName: firstName || req.user.claims.first_name,\n        lastName: lastName || req.user.claims.last_name,\n        profileImageUrl: req.user.claims.profile_image_url,\n        role,\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      res.status(500).json({ message: \"Failed to complete registration\" });\n    }\n  });\n\n  // Receivables routes\n  app.get('/api/receivables', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can access receivables\" });\n      }\n\n      const receivables = await storage.getReceivablesByMerchant(userId);\n      res.json(receivables);\n    } catch (error) {\n      console.error(\"Error fetching receivables:\", error);\n      res.status(500).json({ message: \"Failed to fetch receivables\" });\n    }\n  });\n\n  app.post('/api/receivables', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can create receivables\" });\n      }\n\n      const validation = createReceivableSchema.safeParse(req.body);\n      if (!validation.success) {\n        const validationError = fromError(validation.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n\n      const { amount, ...rest } = validation.data;\n      const receivable = await storage.createReceivable(userId, {\n        ...rest,\n        amount: amount, // Convert string to decimal\n      });\n\n      res.json(receivable);\n    } catch (error) {\n      console.error(\"Error creating receivable:\", error);\n      res.status(500).json({ message: \"Failed to create receivable\" });\n    }\n  });\n\n  app.put('/api/receivables/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can update receivables\" });\n      }\n\n      // Check if receivable belongs to the user\n      const existingReceivable = await storage.getReceivable(id);\n      if (!existingReceivable || existingReceivable.merchantId !== userId) {\n        return res.status(404).json({ message: \"Receivable not found\" });\n      }\n\n      const validation = createReceivableSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        const validationError = fromError(validation.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n\n      const { amount, ...rest } = validation.data;\n      const updatedData: any = { ...rest };\n      if (amount) {\n        updatedData.amount = amount; // Convert string to decimal\n      }\n\n      const receivable = await storage.updateReceivable(id, updatedData);\n      res.json(receivable);\n    } catch (error) {\n      console.error(\"Error updating receivable:\", error);\n      res.status(500).json({ message: \"Failed to update receivable\" });\n    }\n  });\n\n  app.delete('/api/receivables/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can delete receivables\" });\n      }\n\n      // Check if receivable belongs to the user\n      const existingReceivable = await storage.getReceivable(id);\n      if (!existingReceivable || existingReceivable.merchantId !== userId) {\n        return res.status(404).json({ message: \"Receivable not found\" });\n      }\n\n      await storage.deleteReceivable(id);\n      res.json({ message: \"Receivable deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting receivable:\", error);\n      res.status(500).json({ message: \"Failed to delete receivable\" });\n    }\n  });\n\n  // Securities routes\n  app.post('/api/securities/securitize/:receivableId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { receivableId } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can securitize receivables\" });\n      }\n\n      // Check if receivable belongs to the user and can be securitized\n      const receivable = await storage.getReceivable(receivableId);\n      if (!receivable || receivable.merchantId !== userId) {\n        return res.status(404).json({ message: \"Receivable not found\" });\n      }\n\n      if (receivable.status !== \"draft\" && receivable.status !== \"active\") {\n        return res.status(400).json({ message: \"Receivable cannot be securitized in its current status\" });\n      }\n\n      const validation = createSecuritySchema.safeParse(req.body);\n      if (!validation.success) {\n        const validationError = fromError(validation.error);\n        return res.status(400).json({ message: validationError.message });\n      }\n\n      const { totalValue, expectedReturn, ...rest } = validation.data;\n      \n      // Create security\n      const security = await storage.createSecurity({\n        ...rest,\n        receivableId,\n        merchantId: userId,\n        totalValue: totalValue,\n        expectedReturn: expectedReturn || null,\n        currency: receivable.currency,\n      });\n\n      // Update receivable status\n      await storage.updateReceivable(receivableId, { status: \"securitized\" });\n\n      res.json(security);\n    } catch (error) {\n      console.error(\"Error securitizing receivable:\", error);\n      res.status(500).json({ message: \"Failed to securitize receivable\" });\n    }\n  });\n\n  app.get('/api/securities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can access securities\" });\n      }\n\n      const securities = await storage.getSecuritiesByMerchant(userId);\n      res.json(securities);\n    } catch (error) {\n      console.error(\"Error fetching securities:\", error);\n      res.status(500).json({ message: \"Failed to fetch securities\" });\n    }\n  });\n\n  app.post('/api/securities/:id/list', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can list securities\" });\n      }\n\n      // Check if security belongs to the user\n      const existingSecurity = await storage.getSecurity(id);\n      if (!existingSecurity || existingSecurity.merchantId !== userId) {\n        return res.status(404).json({ message: \"Security not found\" });\n      }\n\n      if (existingSecurity.status !== \"securitized\") {\n        return res.status(400).json({ message: \"Security must be securitized before listing\" });\n      }\n\n      const security = await storage.listSecurity(id);\n      \n      // Update receivable status to listed\n      await storage.updateReceivable(existingSecurity.receivableId, { status: \"listed\" });\n\n      // Note: In a production system, you might want to notify investors about new listings\n      // For now, we'll focus on notifications for direct user actions\n      \n      res.json(security);\n    } catch (error) {\n      console.error(\"Error listing security:\", error);\n      res.status(500).json({ message: \"Failed to list security\" });\n    }\n  });\n\n  // Public marketplace route for investors\n  app.get('/api/marketplace/securities', async (req, res) => {\n    try {\n      const securities = await storage.getListedSecurities();\n      res.json(securities);\n    } catch (error) {\n      console.error(\"Error fetching marketplace securities:\", error);\n      res.status(500).json({ message: \"Failed to fetch marketplace securities\" });\n    }\n  });\n\n  // Investor routes\n  app.post('/api/securities/:id/purchase', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'investor') {\n        return res.status(403).json({ message: \"Only investors can purchase securities\" });\n      }\n\n      const security = await storage.purchaseSecurity(id, userId);\n      \n      // Update related receivable status to sold\n      await storage.updateReceivable(security.receivableId, { status: \"sold\" });\n\n      // Create notification for merchant\n      await storage.createNotification({\n        userId: security.merchantId,\n        type: \"security_purchased\",\n        title: \"Security Purchased!\",\n        message: `Your security \"${security.title}\" has been purchased by an investor.`,\n        data: {\n          securityId: security.id,\n          securityTitle: security.title,\n          amount: security.totalValue,\n        },\n        read: false,\n      });\n\n      res.json(security);\n    } catch (error) {\n      console.error(\"Error purchasing security:\", error);\n      if ((error as Error).message === \"Security not found or already purchased\") {\n        res.status(400).json({ message: (error as Error).message });\n      } else {\n        res.status(500).json({ message: \"Failed to purchase security\" });\n      }\n    }\n  });\n\n  app.get('/api/investor/securities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'investor') {\n        return res.status(403).json({ message: \"Only investors can access purchased securities\" });\n      }\n\n      const securities = await storage.getPurchasedSecurities(userId);\n      res.json(securities);\n    } catch (error) {\n      console.error(\"Error fetching purchased securities:\", error);\n      res.status(500).json({ message: \"Failed to fetch purchased securities\" });\n    }\n  });\n\n  // Payment settlement routes\n  app.post('/api/securities/:id/mark-paid', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'merchant') {\n        return res.status(403).json({ message: \"Only merchants can mark securities as paid\" });\n      }\n\n      // Check if security belongs to the merchant and is in a payable status\n      const existingSecurity = await storage.getSecurity(id);\n      if (!existingSecurity || existingSecurity.merchantId !== userId) {\n        return res.status(404).json({ message: \"Security not found\" });\n      }\n\n      if (existingSecurity.status !== \"purchased\" && existingSecurity.status !== \"payment_due\") {\n        return res.status(400).json({ message: \"Security cannot be marked as paid in its current status\" });\n      }\n\n      // Mark security as paid\n      const paidSecurity = await storage.markSecurityAsPaid(id);\n\n      // Update investor's wallet balance\n      if (existingSecurity.purchasedBy) {\n        await storage.updateUserWalletBalance(\n          existingSecurity.purchasedBy, \n          parseFloat(existingSecurity.totalValue)\n        );\n\n        // Create notification for investor about payment received\n        await storage.createNotification({\n          userId: existingSecurity.purchasedBy,\n          type: \"payment_received\",\n          title: \"Payment Received!\",\n          message: `Payment of $${parseFloat(existingSecurity.totalValue).toLocaleString()} has been received for security \"${existingSecurity.title}\".`,\n          data: {\n            securityId: existingSecurity.id,\n            securityTitle: existingSecurity.title,\n            amount: existingSecurity.totalValue,\n          },\n          read: false,\n        });\n      }\n\n      // Create confirmation notification for merchant\n      await storage.createNotification({\n        userId: userId,\n        type: \"payment_received\",\n        title: \"Payment Processed\",\n        message: `You have successfully marked security \"${existingSecurity.title}\" as paid.`,\n        data: {\n          securityId: existingSecurity.id,\n          securityTitle: existingSecurity.title,\n          amount: existingSecurity.totalValue,\n        },\n        read: false,\n      });\n\n      res.json(paidSecurity);\n    } catch (error) {\n      console.error(\"Error marking security as paid:\", error);\n      res.status(500).json({ message: \"Failed to mark security as paid\" });\n    }\n  });\n\n  // Profile management routes\n  app.put('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = req.body;\n\n      // Validate profile data\n      const validatedData = {\n        firstName: profileData.firstName || null,\n        lastName: profileData.lastName || null,\n        phoneNumber: profileData.phoneNumber || null,\n        address: profileData.address || null,\n      };\n\n      const updatedUser = await storage.updateUserProfile(userId, validatedData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Notification routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteNotification(id);\n      res.json({ message: \"Notification deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  app.delete('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      await storage.clearAllNotifications(userId);\n      res.json({ message: \"All notifications cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing notifications:\", error);\n      res.status(500).json({ message: \"Failed to clear notifications\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17229},"server/storage.ts":{"content":"import {\n  users,\n  receivables,\n  securities,\n  notifications,\n  type User,\n  type UpsertUser,\n  type RegisterUser,\n  type Receivable,\n  type InsertReceivable,\n  type Security,\n  type InsertSecurity,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  // Registration operations\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: RegisterUser): Promise<User>;\n  // Receivable operations\n  createReceivable(merchantId: string, receivable: InsertReceivable): Promise<Receivable>;\n  getReceivablesByMerchant(merchantId: string): Promise<Receivable[]>;\n  getReceivable(id: string): Promise<Receivable | undefined>;\n  updateReceivable(id: string, receivable: Partial<Receivable>): Promise<Receivable>;\n  deleteReceivable(id: string): Promise<void>;\n  // Security operations\n  createSecurity(security: InsertSecurity): Promise<Security>;\n  getSecuritiesByMerchant(merchantId: string): Promise<Security[]>;\n  getListedSecurities(): Promise<Security[]>;\n  getSecurity(id: string): Promise<Security | undefined>;\n  updateSecurity(id: string, security: Partial<InsertSecurity>): Promise<Security>;\n  listSecurity(id: string): Promise<Security>;\n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<Notification>;\n  deleteNotification(id: string): Promise<void>;\n  clearAllNotifications(userId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: RegisterUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  // Receivable operations\n  async createReceivable(merchantId: string, receivableData: InsertReceivable): Promise<Receivable> {\n    const [receivable] = await db\n      .insert(receivables)\n      .values({\n        ...receivableData,\n        merchantId,\n      })\n      .returning();\n    return receivable;\n  }\n\n  async getReceivablesByMerchant(merchantId: string): Promise<Receivable[]> {\n    return await db\n      .select()\n      .from(receivables)\n      .where(eq(receivables.merchantId, merchantId))\n      .orderBy(desc(receivables.createdAt));\n  }\n\n  async getReceivable(id: string): Promise<Receivable | undefined> {\n    const [receivable] = await db\n      .select()\n      .from(receivables)\n      .where(eq(receivables.id, id));\n    return receivable;\n  }\n\n  async updateReceivable(id: string, receivableData: Partial<Receivable>): Promise<Receivable> {\n    const [receivable] = await db\n      .update(receivables)\n      .set({\n        ...receivableData,\n        updatedAt: new Date(),\n      })\n      .where(eq(receivables.id, id))\n      .returning();\n    return receivable;\n  }\n\n  async deleteReceivable(id: string): Promise<void> {\n    await db\n      .delete(receivables)\n      .where(eq(receivables.id, id));\n  }\n\n  // Security operations\n  async createSecurity(securityData: InsertSecurity): Promise<Security> {\n    const [security] = await db\n      .insert(securities)\n      .values(securityData)\n      .returning();\n    return security;\n  }\n\n  async getSecuritiesByMerchant(merchantId: string): Promise<Security[]> {\n    return await db\n      .select()\n      .from(securities)\n      .where(eq(securities.merchantId, merchantId))\n      .orderBy(desc(securities.createdAt));\n  }\n\n  async getListedSecurities(): Promise<any[]> {\n    return await db\n      .select({\n        id: securities.id,\n        receivableId: securities.receivableId,\n        merchantId: securities.merchantId,\n        title: securities.title,\n        description: securities.description,\n        totalValue: securities.totalValue,\n        currency: securities.currency,\n        expectedReturn: securities.expectedReturn,\n        riskGrade: securities.riskGrade,\n        duration: securities.duration,\n        status: securities.status,\n        listedAt: securities.listedAt,\n        purchasedBy: securities.purchasedBy,\n        purchasedAt: securities.purchasedAt,\n        paidAt: securities.paidAt,\n        createdAt: securities.createdAt,\n        updatedAt: securities.updatedAt,\n        // Include receivable details\n        debtorName: receivables.debtorName,\n        receivableDueDate: receivables.dueDate,\n        category: receivables.category,\n        riskLevel: receivables.riskLevel,\n        // Include merchant details\n        merchantName: users.firstName,\n        merchantLastName: users.lastName,\n      })\n      .from(securities)\n      .leftJoin(receivables, eq(securities.receivableId, receivables.id))\n      .leftJoin(users, eq(securities.merchantId, users.id))\n      .where(eq(securities.status, \"listed\"))\n      .orderBy(desc(securities.listedAt));\n  }\n\n  async getPurchasedSecurities(investorId: string): Promise<Security[]> {\n    return await db\n      .select()\n      .from(securities)\n      .where(eq(securities.purchasedBy, investorId))\n      .orderBy(desc(securities.purchasedAt));\n  }\n\n  async purchaseSecurity(securityId: string, investorId: string): Promise<Security> {\n    const [security] = await db\n      .update(securities)\n      .set({\n        status: \"purchased\",\n        purchasedBy: investorId,\n        purchasedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(and(eq(securities.id, securityId), eq(securities.status, \"listed\")))\n      .returning();\n    \n    if (!security) {\n      throw new Error(\"Security not found or already purchased\");\n    }\n    \n    return security;\n  }\n\n  async getSecurity(id: string): Promise<Security | undefined> {\n    const [security] = await db\n      .select()\n      .from(securities)\n      .where(eq(securities.id, id));\n    return security;\n  }\n\n  async updateSecurity(id: string, securityData: Partial<InsertSecurity>): Promise<Security> {\n    const [security] = await db\n      .update(securities)\n      .set({\n        ...securityData,\n        updatedAt: new Date(),\n      })\n      .where(eq(securities.id, id))\n      .returning();\n    return security;\n  }\n\n  async listSecurity(id: string): Promise<Security> {\n    const [security] = await db\n      .update(securities)\n      .set({\n        status: \"listed\",\n        listedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(securities.id, id))\n      .returning();\n    return security;\n  }\n\n  // Security payment methods\n  async markSecurityAsPaid(securityId: string): Promise<Security> {\n    const [security] = await db\n      .update(securities)\n      .set({ \n        status: \"paid\",\n        paidAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(securities.id, securityId))\n      .returning();\n    return security;\n  }\n\n  async updateUserWalletBalance(userId: string, amount: number): Promise<User> {\n    // Get current balance\n    const [currentUser] = await db.select().from(users).where(eq(users.id, userId));\n    const currentBalance = parseFloat(currentUser.walletBalance || \"0\");\n    const newBalance = currentBalance + amount;\n\n    const [user] = await db\n      .update(users)\n      .set({ \n        walletBalance: newBalance.toString(),\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Profile management methods\n  async updateUserProfile(userId: string, profileData: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...profileData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Notification methods\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [createdNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return createdNotification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification> {\n    const [notification] = await db\n      .update(notifications)\n      .set({ read: true })\n      .where(eq(notifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  async deleteNotification(id: string): Promise<void> {\n    await db.delete(notifications).where(eq(notifications.id, id));\n  }\n\n  async clearAllNotifications(userId: string): Promise<void> {\n    await db.delete(notifications).where(eq(notifications.userId, userId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9733},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  boolean,\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { enum: [\"merchant\", \"investor\"] }).notNull(),\n  walletBalance: decimal(\"wallet_balance\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  phoneNumber: varchar(\"phone_number\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerUserSchema = insertUserSchema.pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n});\n\nexport const updateProfileSchema = createInsertSchema(users).pick({\n  firstName: true,\n  lastName: true,\n  phoneNumber: true,\n  address: true,\n});\n\nexport type UpdateProfile = z.infer<typeof updateProfileSchema>;\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\", { enum: [\"security_purchased\", \"security_listed\", \"payment_received\", \"payment_due\"] }).notNull(),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  data: jsonb(\"data\"), // Additional data like security ID, amount, etc.\n  read: boolean(\"read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Receivables table\nexport const receivables = pgTable(\"receivables\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  merchantId: varchar(\"merchant_id\").notNull().references(() => users.id),\n  debtorName: varchar(\"debtor_name\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  dueDate: date(\"due_date\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { enum: [\"Manufacturing\", \"Retail\", \"Technology\", \"Services\", \"Healthcare\", \"Finance\", \"Construction\", \"Agriculture\"] }).notNull().default(\"Services\"),\n  riskLevel: varchar(\"risk_level\", { enum: [\"Low\", \"Medium\", \"High\"] }).notNull().default(\"Medium\"),\n  status: varchar(\"status\", { enum: [\"draft\", \"active\", \"securitized\", \"listed\", \"sold\", \"paid\", \"overdue\"] }).notNull().default(\"draft\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Securities table - represents securitized receivables\nexport const securities = pgTable(\"securities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  receivableId: varchar(\"receivable_id\").notNull().references(() => receivables.id),\n  merchantId: varchar(\"merchant_id\").notNull().references(() => users.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  totalValue: decimal(\"total_value\", { precision: 12, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default(\"USD\"),\n  expectedReturn: decimal(\"expected_return\", { precision: 5, scale: 2 }), // percentage\n  riskGrade: varchar(\"risk_grade\", { enum: [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\"] }),\n  duration: varchar(\"duration\").notNull(), // e.g., \"90 days\", \"6 months\"\n  status: varchar(\"status\", { enum: [\"draft\", \"securitized\", \"listed\", \"purchased\", \"payment_due\", \"paid\", \"cancelled\"] }).notNull().default(\"draft\"),\n  listedAt: timestamp(\"listed_at\"),\n  purchasedBy: varchar(\"purchased_by\").references(() => users.id),\n  purchasedAt: timestamp(\"purchased_at\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  receivables: many(receivables),\n  securities: many(securities),\n  purchasedSecurities: many(securities, { relationName: \"purchased\" }),\n}));\n\nexport const receivablesRelations = relations(receivables, ({ one, many }) => ({\n  merchant: one(users, {\n    fields: [receivables.merchantId],\n    references: [users.id],\n  }),\n  securities: many(securities),\n}));\n\nexport const securitiesRelations = relations(securities, ({ one }) => ({\n  receivable: one(receivables, {\n    fields: [securities.receivableId],\n    references: [receivables.id],\n  }),\n  merchant: one(users, {\n    fields: [securities.merchantId],\n    references: [users.id],\n  }),\n  purchaser: one(users, {\n    fields: [securities.purchasedBy],\n    references: [users.id],\n  }),\n}));\n\n// Schemas\nexport const insertReceivableSchema = createInsertSchema(receivables).omit({\n  id: true,\n  merchantId: true,\n  status: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const createReceivableSchema = insertReceivableSchema.extend({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Amount must be a valid number with up to 2 decimal places\"),\n});\n\nexport const insertSecuritySchema = createInsertSchema(securities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  listedAt: true,\n});\n\nexport const createSecuritySchema = insertSecuritySchema.extend({\n  totalValue: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Total value must be a valid number with up to 2 decimal places\"),\n  expectedReturn: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Expected return must be a valid percentage\").optional(),\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type Receivable = typeof receivables.$inferSelect;\nexport type InsertReceivable = z.infer<typeof insertReceivableSchema>;\nexport type CreateReceivable = z.infer<typeof createReceivableSchema>;\nexport type Security = typeof securities.$inferSelect;\nexport type InsertSecurity = z.infer<typeof insertSecuritySchema>;\nexport type CreateSecurity = z.infer<typeof createSecuritySchema>;\n","size_bytes":7113},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Register from \"@/pages/register\";\nimport MerchantDashboard from \"@/pages/merchant-dashboard\";\nimport InvestorDashboard from \"@/pages/investor-dashboard\";\nimport Profile from \"@/pages/profile\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/register\" component={Register} />\n        </>\n      ) : (\n        <>\n          {user && !user.role ? (\n            <Route path=\"*\" component={Register} />\n          ) : user?.role === \"merchant\" ? (\n            <>\n              <Route path=\"/\" component={MerchantDashboard} />\n              <Route path=\"/dashboard\" component={MerchantDashboard} />\n              <Route path=\"/profile\" component={Profile} />\n            </>\n          ) : user?.role === \"investor\" ? (\n            <>\n              <Route path=\"/\" component={InvestorDashboard} />\n              <Route path=\"/dashboard\" component={InvestorDashboard} />\n              <Route path=\"/profile\" component={Profile} />\n            </>\n          ) : (\n            <Route path=\"/\" component={Home} />\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2124},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(213, 94%, 68%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom colors for the platform */\n  --primary-50: hsl(214, 100%, 97%);\n  --primary-500: hsl(213, 94%, 68%);\n  --primary-600: hsl(213, 82%, 63%);\n  --primary-700: hsl(213, 87%, 51%);\n  --success-500: hsl(158, 64%, 52%);\n  --success-600: hsl(158, 64%, 47%);\n  --accent-500: hsl(262, 83%, 58%);\n  --accent-600: hsl(262, 83%, 53%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(213, 94%, 68%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n  \n  /* Improved focus states */\n  button:focus-visible,\n  input:focus-visible,\n  textarea:focus-visible,\n  select:focus-visible {\n    @apply ring-2 ring-ring ring-offset-2 ring-offset-background outline-none;\n  }\n}\n\n/* Custom utility classes */\n.bg-primary-50 {\n  background-color: hsl(var(--primary-50));\n}\n\n.bg-primary-500 {\n  background-color: hsl(var(--primary-500));\n}\n\n.bg-primary-600 {\n  background-color: hsl(var(--primary-600));\n}\n\n.text-primary-500 {\n  color: hsl(var(--primary-500));\n}\n\n.text-primary-600 {\n  color: hsl(var(--primary-600));\n}\n\n.border-primary-500 {\n  border-color: hsl(var(--primary-500));\n}\n\n.bg-success-500 {\n  background-color: hsl(var(--success-500));\n}\n\n.bg-success-600 {\n  background-color: hsl(var(--success-600));\n}\n\n.text-success-500 {\n  color: hsl(var(--success-500));\n}\n\n.text-success-600 {\n  color: hsl(var(--success-600));\n}\n\n.bg-accent-500 {\n  background-color: hsl(var(--accent-500));\n}\n\n.text-accent-500 {\n  color: hsl(var(--accent-500));\n}\n\n.hover\\:bg-primary-600:hover {\n  background-color: hsl(var(--primary-600));\n}\n\n.hover\\:text-primary-500:hover {\n  color: hsl(var(--primary-500));\n}\n\n.hover\\:text-primary-600:hover {\n  color: hsl(var(--primary-600));\n}\n\n.hover\\:border-primary-500:hover {\n  border-color: hsl(var(--primary-500));\n}\n\n.focus\\:ring-primary-500:focus {\n  --tw-ring-color: hsl(var(--primary-500));\n}\n\n.focus\\:border-primary-500:focus {\n  border-color: hsl(var(--primary-500));\n}\n\n@layer components {\n  /* Smooth transitions for interactive elements */\n  .transition-smooth {\n    @apply transition-all duration-200 ease-in-out;\n  }\n  \n  /* Loading skeleton animation */\n  .skeleton {\n    @apply animate-pulse bg-muted rounded;\n  }\n  \n  /* Enhanced button hover states */\n  .btn-hover {\n    @apply transition-smooth hover:scale-[1.02] active:scale-[0.98];\n  }\n  \n  /* Card hover effects */\n  .card-hover {\n    @apply transition-smooth hover:shadow-lg hover:-translate-y-1;\n  }\n  \n  /* Input focus effects */\n  .input-focus {\n    @apply transition-smooth focus:ring-2 focus:ring-primary-500 focus:border-primary-500;\n  }\n  \n  /* Empty state styling */\n  .empty-state {\n    @apply flex flex-col items-center justify-center py-12 px-6 text-center;\n  }\n  \n  /* Form validation error styling */\n  .field-error {\n    @apply border-destructive ring-destructive/20 ring-2;\n  }\n  \n  /* Success state styling */\n  .field-success {\n    @apply border-green-500 ring-green-500/20 ring-2;\n  }\n  \n  /* Loading button state */\n  .btn-loading {\n    @apply opacity-70 cursor-not-allowed pointer-events-none;\n  }\n}\n\n@layer utilities {\n  /* Typography improvements */\n  .text-balance {\n    text-wrap: balance;\n  }\n  \n  /* Custom scrollbar */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n    scrollbar-color: hsl(var(--muted-foreground)) transparent;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-track {\n    background: transparent;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-thumb {\n    background-color: hsl(var(--muted-foreground));\n    border-radius: 3px;\n  }\n  \n  .scrollbar-thin::-webkit-scrollbar-thumb:hover {\n    background-color: hsl(var(--foreground));\n  }\n  \n  /* Animation utilities */\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-bounce-subtle {\n    animation: bounceSubtle 0.6s ease-in-out;\n  }\n}\n\n/* Keyframe animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes bounceSubtle {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-4px);\n  }\n}\n","size_bytes":5984},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Home, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  showNav?: boolean;\n}\n\nexport default function Header({ showNav = true }: HeaderProps) {\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">SR</span>\n              </div>\n              <span className=\"text-xl font-bold text-gray-900\">SecureReceivables</span>\n            </Link>\n          </div>\n\n          {showNav && (\n            <nav className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n                  <Home className=\"w-4 h-4\" />\n                  <span>Dashboard</span>\n                </Button>\n              </Link>\n              \n              <Button \n                variant=\"outline\" \n                onClick={handleLogout}\n                className=\"flex items-center space-x-2\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                <span>Logout</span>\n              </Button>\n            </nav>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":1661},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect to role selection if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n          Welcome back, {user?.firstName || 'User'}!\n        </h1>\n        <p className=\"text-gray-600\">Loading your dashboard...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1239},"client/src/pages/investor-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { LogOut, Wallet, TrendingUp, Coins, Shield, Search, Calculator, Download, Filter, SortAsc, SortDesc, Eye, Calendar, Building2, DollarSign, ShoppingCart, CheckCircle, Clock, FileText, Edit, AlertTriangle, XCircle, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Security } from \"@shared/schema\";\nimport Header from \"@/components/Header\";\nimport NotificationCenter from \"@/components/NotificationCenter\";\nimport EmptyState from \"@/components/EmptyState\";\nimport LoadingSpinner from \"@/components/LoadingSpinner\";\nimport SkeletonCard from \"@/components/SkeletonCard\";\n\ntype SortOption = 'amount-asc' | 'amount-desc' | 'date-asc' | 'date-desc';\n\nexport default function InvestorDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  const [currencyFilter, setCurrencyFilter] = useState<string>('all');\n  const [sortOption, setSortOption] = useState<SortOption>('amount-desc');\n  const [selectedSecurity, setSelectedSecurity] = useState<Security | null>(null);\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\n  const [isPurchaseModalOpen, setIsPurchaseModalOpen] = useState(false);\n  const [isAgreementModalOpen, setIsAgreementModalOpen] = useState(false);\n  const [marketplaceStatusFilter, setMarketplaceStatusFilter] = useState<string>(\"all\");\n  const [ownedStatusFilter, setOwnedStatusFilter] = useState<string>(\"all\");\n\n  // Fetch marketplace securities\n  const { data: securities = [], isLoading: securitiesLoading } = useQuery<Security[]>({\n    queryKey: [\"/api/marketplace/securities\"],\n    enabled: !!user && user.role === \"investor\",\n    retry: false,\n  });\n\n  // Fetch purchased securities\n  const { data: purchasedSecurities = [], isLoading: purchasedLoading } = useQuery<Security[]>({\n    queryKey: [\"/api/investor/securities\"],\n    enabled: !!user && user.role === \"investor\",\n    retry: false,\n  });\n\n  // Purchase mutation\n  const purchaseMutation = useMutation({\n    mutationFn: async (securityId: string) => {\n      return await apiRequest(\"POST\", `/api/securities/${securityId}/purchase`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Purchase Successful\",\n        description: \"You have successfully purchased the security!\",\n      });\n      setIsPurchaseModalOpen(false);\n      setSelectedSecurity(null);\n      // Invalidate both marketplace and purchased securities\n      queryClient.invalidateQueries({ queryKey: [\"/api/marketplace/securities\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/investor/securities\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to purchase security. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect if not authenticated or not an investor\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && user && user.role !== \"investor\") {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access the investor dashboard.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const handleViewDetails = (security: Security) => {\n    setSelectedSecurity(security);\n    setIsDetailsModalOpen(true);\n  };\n\n  const handlePurchaseClick = (security: Security) => {\n    setSelectedSecurity(security);\n    setIsPurchaseModalOpen(true);\n  };\n\n  const handleConfirmPurchase = () => {\n    if (selectedSecurity) {\n      purchaseMutation.mutate(selectedSecurity.id);\n    }\n  };\n\n  const handleViewAgreement = (security: Security) => {\n    setSelectedSecurity(security);\n    setIsAgreementModalOpen(true);\n  };\n\n  // Helper function to get status badge variant and icon\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return { variant: \"secondary\" as const, icon: Edit, color: \"text-gray-600\" };\n      case \"securitized\":\n        return { variant: \"outline\" as const, icon: Shield, color: \"text-blue-600\" };\n      case \"listed\":\n        return { variant: \"default\" as const, icon: TrendingUp, color: \"text-green-600\" };\n      case \"purchased\":\n        return { variant: \"default\" as const, icon: CheckCircle, color: \"text-blue-600\" };\n      case \"payment_due\":\n        return { variant: \"destructive\" as const, icon: AlertTriangle, color: \"text-orange-600\" };\n      case \"paid\":\n        return { variant: \"default\" as const, icon: CheckCircle, color: \"text-green-600\" };\n      case \"cancelled\":\n        return { variant: \"secondary\" as const, icon: XCircle, color: \"text-red-600\" };\n      default:\n        return { variant: \"secondary\" as const, icon: Clock, color: \"text-gray-600\" };\n    }\n  };\n\n  // Filter marketplace securities\n  const filteredMarketplace = marketplaceStatusFilter === \"all\" \n    ? securities \n    : securities.filter((s: Security) => s.status === marketplaceStatusFilter);\n\n  // Filter owned securities\n  const filteredOwnedSecurities = ownedStatusFilter === \"all\" \n    ? purchasedSecurities \n    : purchasedSecurities.filter((s: Security) => s.status === ownedStatusFilter);\n\n  // Filter and sort securities\n  const filteredAndSortedSecurities = securities\n    .filter(security => currencyFilter === 'all' || security.currency === currencyFilter)\n    .sort((a, b) => {\n      switch (sortOption) {\n        case 'amount-asc':\n          return parseFloat(a.totalValue) - parseFloat(b.totalValue);\n        case 'amount-desc':\n          return parseFloat(b.totalValue) - parseFloat(a.totalValue);\n        case 'date-asc':\n          return new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\n        case 'date-desc':\n          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n        default:\n          return 0;\n      }\n    });\n\n  // Get unique currencies\n  const availableCurrencies = Array.from(new Set(securities.map(s => s.currency)));\n\n  // Calculate portfolio stats\n  const totalInvestmentValue = securities.reduce((sum, s) => sum + parseFloat(s.totalValue), 0);\n  const averageReturn = securities.length > 0 \n    ? securities.reduce((sum, s) => sum + (parseFloat(s.expectedReturn || '0')), 0) / securities.length \n    : 0;\n  \n  // Calculate purchased securities stats\n  const totalPurchasedValue = purchasedSecurities.reduce((sum, s) => sum + parseFloat(s.totalValue), 0);\n  const purchasedCount = purchasedSecurities.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header showNav={false} />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Investor Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">Welcome back! Explore new investment opportunities.</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <NotificationCenter />\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = \"/profile\"}\n              className=\"bg-white hover:bg-gray-50 text-gray-700 px-4 py-2 rounded-lg transition-colors flex items-center\"\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Profile & Settings\n            </Button>\n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition-colors flex items-center\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Portfolio Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Wallet Balance</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    ${user?.walletBalance ? parseFloat(user.walletBalance).toLocaleString() : \"0.00\"}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-5 h-5 text-emerald-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-emerald-600\">Available for investments</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">My Investments</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">${totalPurchasedValue.toLocaleString()}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">{purchasedCount} securities owned</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Available Securities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{securities.length}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Coins className=\"w-5 h-5 text-purple-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Ready to invest</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Average Return</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{averageReturn.toFixed(1)}%</p>\n                </div>\n                <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-yellow-600\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Expected annual return</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Marketplace and Investments Tabs */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <Tabs defaultValue=\"marketplace\" className=\"w-full\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                      <TabsTrigger value=\"marketplace\">Marketplace</TabsTrigger>\n                      <TabsTrigger value=\"purchased\">My Securities</TabsTrigger>\n                    </TabsList>\n                  </div>\n                </CardHeader>\n                \n                <TabsContent value=\"marketplace\" className=\"mt-0\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle className=\"text-lg font-semibold text-gray-900\">Available Securities</CardTitle>\n                  <div className=\"flex items-center space-x-4\">\n                    {/* Currency Filter */}\n                    <div className=\"flex items-center space-x-2\">\n                      <Filter className=\"w-4 h-4 text-gray-500\" />\n                      <Select value={currencyFilter} onValueChange={setCurrencyFilter}>\n                        <SelectTrigger className=\"w-24\">\n                          <SelectValue placeholder=\"Currency\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All</SelectItem>\n                          {availableCurrencies.map(currency => (\n                            <SelectItem key={currency} value={currency}>{currency}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    {/* Status Filter */}\n                    <div className=\"flex items-center space-x-2\">\n                      <Select value={marketplaceStatusFilter} onValueChange={setMarketplaceStatusFilter}>\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue placeholder=\"Status\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Status</SelectItem>\n                          <SelectItem value=\"listed\">Listed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Sort Options */}\n                    <div className=\"flex items-center space-x-2\">\n                      <SortAsc className=\"w-4 h-4 text-gray-500\" />\n                      <Select value={sortOption} onValueChange={(value: SortOption) => setSortOption(value)}>\n                        <SelectTrigger className=\"w-40\">\n                          <SelectValue placeholder=\"Sort by\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"amount-desc\">Amount (High to Low)</SelectItem>\n                          <SelectItem value=\"amount-asc\">Amount (Low to High)</SelectItem>\n                          <SelectItem value=\"date-desc\">Date (Newest)</SelectItem>\n                          <SelectItem value=\"date-asc\">Date (Oldest)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {securitiesLoading ? (\n                  <div className=\"grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3\">\n                    {Array.from({ length: 6 }).map((_, i) => (\n                      <div key={i} className=\"bg-white border border-gray-200 rounded-xl p-6 animate-pulse\">\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                          <div className=\"h-6 bg-gray-200 rounded w-12\"></div>\n                        </div>\n                        <div className=\"text-center mb-4\">\n                          <div className=\"h-9 bg-gray-200 rounded w-32 mx-auto mb-1\"></div>\n                          <div className=\"h-4 bg-gray-200 rounded w-24 mx-auto\"></div>\n                        </div>\n                        <div className=\"h-6 bg-gray-200 rounded mb-3\"></div>\n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex justify-between\">\n                            <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                            <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                            <div className=\"h-4 bg-gray-200 rounded w-12\"></div>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                            <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                          </div>\n                        </div>\n                        <div className=\"h-8 bg-gray-200 rounded mb-4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-32 mb-4\"></div>\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          <div className=\"h-8 bg-gray-200 rounded\"></div>\n                          <div className=\"h-8 bg-gray-200 rounded\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : filteredMarketplace.length === 0 ? (\n                  <EmptyState\n                    icon={Shield}\n                    title=\"No Securities Available\"\n                    description=\"There are no securities available for purchase at the moment. Check back later for new investment opportunities or adjust your filters.\"\n                    actionLabel=\"Clear Filters\"\n                    onAction={() => {\n                      setCurrencyFilter(\"all\");\n                      setMarketplaceStatusFilter(\"all\");\n                    }}\n                  />\n                ) : (\n                  <div className=\"grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3\">\n                    {filteredMarketplace.map((security: Security) => (\n                      <div key={security.id} className=\"bg-white border border-gray-200 rounded-xl p-6 card-hover animate-slide-up shadow-sm hover:shadow-lg transition-all duration-300\">\n                        {/* Header with Status and Risk Grade */}\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            {(() => {\n                              const statusInfo = getStatusInfo(security.status);\n                              const StatusIcon = statusInfo.icon;\n                              return (\n                                <Badge variant={statusInfo.variant} className=\"flex items-center space-x-1\">\n                                  <StatusIcon className=\"w-3 h-3\" />\n                                  <span className=\"capitalize\">{security.status.replace('_', ' ')}</span>\n                                </Badge>\n                              );\n                            })()}\n                          </div>\n                          {security.riskGrade && (\n                            <Badge variant={\n                              security.riskGrade.startsWith('A') ? 'default' :\n                              security.riskGrade.startsWith('B') ? 'secondary' : 'destructive'\n                            } className=\"text-xs font-semibold\">\n                              {security.riskGrade}\n                            </Badge>\n                          )}\n                        </div>\n\n                        {/* Amount - Most Prominent */}\n                        <div className=\"text-center mb-4\">\n                          <div className=\"text-3xl font-bold text-gray-900 mb-1\">\n                            {security.currency} {parseFloat(security.totalValue).toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">Investment Amount</div>\n                        </div>\n\n                        {/* Security Title */}\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-3 line-clamp-2 min-h-[3.5rem]\">\n                          {security.title}\n                        </h3>\n\n                        {/* Key Details Grid */}\n                        <div className=\"space-y-3 mb-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center text-gray-600\">\n                              <Calendar className=\"w-4 h-4 mr-2\" />\n                              <span className=\"text-sm\">Duration</span>\n                            </div>\n                            <span className=\"text-sm font-medium text-gray-900\">{security.duration}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center text-gray-600\">\n                              <TrendingUp className=\"w-4 h-4 mr-2 text-green-500\" />\n                              <span className=\"text-sm\">Expected Return</span>\n                            </div>\n                            <span className=\"text-sm font-medium text-green-600\">\n                              {security.expectedReturn ? `${security.expectedReturn}%` : 'N/A'}\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center text-gray-600\">\n                              <Building2 className=\"w-4 h-4 mr-2 text-purple-500\" />\n                              <span className=\"text-sm\">Originator</span>\n                            </div>\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {(security as any).merchantName && (security as any).merchantLastName \n                                ? `${(security as any).merchantName} ${(security as any).merchantLastName}`\n                                : 'Merchant Inc.'}\n                            </span>\n                          </div>\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center text-gray-600\">\n                              <FileText className=\"w-4 h-4 mr-2 text-blue-500\" />\n                              <span className=\"text-sm\">Debtor</span>\n                            </div>\n                            <span className=\"text-sm font-medium text-gray-900\">\n                              {(security as any).debtorName || 'Business Client'}\n                            </span>\n                          </div>\n\n                          {(security as any).receivableDueDate && (\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center text-gray-600\">\n                                <Clock className=\"w-4 h-4 mr-2 text-orange-500\" />\n                                <span className=\"text-sm\">Due Date</span>\n                              </div>\n                              <span className=\"text-sm font-medium text-gray-900\">\n                                {format(new Date((security as any).receivableDueDate), \"MMM dd, yyyy\")}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Description Snippet */}\n                        {security.description && (\n                          <div className=\"mb-4\">\n                            <p className=\"text-sm text-gray-600 line-clamp-2\">\n                              {security.description}\n                            </p>\n                          </div>\n                        )}\n\n                        {/* Listing Date */}\n                        <div className=\"text-xs text-gray-500 mb-4 pb-3 border-b border-gray-100\">\n                          Listed: {format(new Date(security.listedAt || security.createdAt || new Date()), \"MMM dd, yyyy\")}\n                        </div>\n\n                        {/* Action Buttons */}\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => handleViewDetails(security)}\n                            className=\"text-primary-600 hover:text-primary-700 hover:bg-primary-50 border-primary-200 hover:border-primary-300\"\n                          >\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </Button>\n                          <Button\n                            onClick={() => handlePurchaseClick(security)}\n                            className=\"bg-primary-500 hover:bg-primary-600 text-white shadow-sm hover:shadow-md transition-all duration-200\"\n                            disabled={purchaseMutation.isPending}\n                          >\n                            <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                            Purchase\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n                  </CardContent>\n                </TabsContent>\n\n                <TabsContent value=\"purchased\" className=\"mt-0\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle className=\"text-lg font-semibold text-gray-900\">My Purchased Securities</CardTitle>\n                      <div className=\"flex items-center space-x-2\">\n                        <Filter className=\"w-4 h-4 text-gray-500\" />\n                        <Select value={ownedStatusFilter} onValueChange={setOwnedStatusFilter}>\n                          <SelectTrigger className=\"w-40\">\n                            <SelectValue placeholder=\"Filter by status\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Status</SelectItem>\n                            <SelectItem value=\"purchased\">Purchased</SelectItem>\n                            <SelectItem value=\"payment_due\">Payment Due</SelectItem>\n                            <SelectItem value=\"paid\">Paid</SelectItem>\n                            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {purchasedLoading ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500\"></div>\n                      </div>\n                    ) : filteredOwnedSecurities.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <CheckCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                          {ownedStatusFilter === \"all\" ? \"No Securities Purchased\" : `No securities with status: ${ownedStatusFilter.replace('_', ' ')}`}\n                        </h3>\n                        <p className=\"text-sm text-gray-500\">\n                          {ownedStatusFilter === \"all\" ? \"Browse the marketplace to find investment opportunities\" : \"Try changing the filter to see more results\"}\n                        </p>\n                      </div>\n                    ) : (\n                      filteredOwnedSecurities.map((security: Security) => (\n                        <div key={security.id} className=\"border border-gray-200 rounded-lg p-4 bg-green-50 border-green-200\">\n                          <div className=\"flex justify-between items-start mb-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3 mb-2\">\n                                <h4 className=\"font-semibold text-gray-900\">{security.title}</h4>\n                                <Badge variant=\"outline\">ID: {security.id.slice(0, 8)}</Badge>\n                                {(() => {\n                                  const statusInfo = getStatusInfo(security.status);\n                                  const StatusIcon = statusInfo.icon;\n                                  return (\n                                    <Badge variant={statusInfo.variant} className=\"flex items-center space-x-1\">\n                                      <StatusIcon className=\"w-3 h-3\" />\n                                      <span className=\"capitalize\">{security.status.replace('_', ' ')}</span>\n                                    </Badge>\n                                  );\n                                })()}\n                                {security.riskGrade && (\n                                  <Badge variant={\n                                    security.riskGrade.startsWith('A') ? 'default' :\n                                    security.riskGrade.startsWith('B') ? 'secondary' : 'destructive'\n                                  }>\n                                    {security.riskGrade}\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div className=\"flex items-center\">\n                                  <DollarSign className=\"w-4 h-4 text-gray-400 mr-1\" />\n                                  <span className=\"font-medium\">{security.currency} {parseFloat(security.totalValue).toLocaleString()}</span>\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <TrendingUp className=\"w-4 h-4 text-green-500 mr-1\" />\n                                  <span>{security.expectedReturn ? `${security.expectedReturn}%` : 'N/A'} return</span>\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Calendar className=\"w-4 h-4 text-blue-500 mr-1\" />\n                                  <span>{security.duration}</span>\n                                </div>\n                                <div className=\"flex items-center\">\n                                  <Clock className=\"w-4 h-4 text-purple-500 mr-1\" />\n                                  <span>Purchased: {format(new Date(security.purchasedAt || security.createdAt || new Date()), \"MMM dd\")}</span>\n                                </div>\n                              </div>\n                              {security.description && (\n                                <p className=\"text-sm text-gray-600 mt-2 line-clamp-2\">{security.description}</p>\n                              )}\n                            </div>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewDetails(security)}\n                                className=\"text-primary-600 hover:text-primary-700 hover:bg-primary-50\"\n                              >\n                                <Eye className=\"w-4 h-4 mr-1\" />\n                                Details\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewAgreement(security)}\n                                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                              >\n                                <FileText className=\"w-4 h-4 mr-1\" />\n                                View Agreement\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </CardContent>\n                </TabsContent>\n              </Tabs>\n            </Card>\n          </div>\n\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-primary-500 to-primary-600 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Investment Tools</h3>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"ghost\"\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <Search className=\"w-4 h-4 mr-3\" />\n                    Browse Marketplace\n                  </Button>\n                  <Button \n                    variant=\"ghost\"\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <Calculator className=\"w-4 h-4 mr-3\" />\n                    ROI Calculator\n                  </Button>\n                  <Button \n                    variant=\"ghost\"\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <Download className=\"w-4 h-4 mr-3\" />\n                    Export Portfolio\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">Portfolio Allocation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-gray-600\">Technology</span>\n                    <span className=\"text-sm font-medium\">45%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-primary-500 h-2 rounded-full\" style={{ width: '45%' }}></div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-gray-600\">Manufacturing</span>\n                    <span className=\"text-sm font-medium\">35%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-success-500 h-2 rounded-full\" style={{ width: '35%' }}></div>\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-sm text-gray-600\">Healthcare</span>\n                    <span className=\"text-sm font-medium\">20%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-accent-500 h-2 rounded-full\" style={{ width: '20%' }}></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n        \n        {/* Security Details Modal */}\n        <Dialog open={isDetailsModalOpen} onOpenChange={setIsDetailsModalOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Security Details</DialogTitle>\n              <DialogDescription>\n                Complete information about this investment opportunity\n              </DialogDescription>\n            </DialogHeader>\n            {selectedSecurity && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Security Information</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Security ID:</span>\n                        <span className=\"font-medium\">{selectedSecurity.id}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Title:</span>\n                        <span className=\"font-medium\">{selectedSecurity.title}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Total Value:</span>\n                        <span className=\"font-medium\">{selectedSecurity.currency} {parseFloat(selectedSecurity.totalValue).toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Expected Return:</span>\n                        <span className=\"font-medium text-green-600\">{selectedSecurity.expectedReturn ? `${selectedSecurity.expectedReturn}%` : 'N/A'}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Investment Details</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Risk Grade:</span>\n                        <Badge variant={\n                          selectedSecurity.riskGrade?.startsWith('A') ? 'default' :\n                          selectedSecurity.riskGrade?.startsWith('B') ? 'secondary' : 'destructive'\n                        }>\n                          {selectedSecurity.riskGrade || 'Not Rated'}\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Duration:</span>\n                        <span className=\"font-medium\">{selectedSecurity.duration}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Merchant:</span>\n                        <span className=\"font-medium\">Merchant XYZ</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Listed Date:</span>\n                        <span className=\"font-medium\">{format(new Date(selectedSecurity.listedAt || selectedSecurity.createdAt || new Date()), \"MMM dd, yyyy\")}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {selectedSecurity.description && (\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 mb-2\">Description</h4>\n                    <p className=\"text-sm text-gray-600 leading-relaxed\">{selectedSecurity.description}</p>\n                  </div>\n                )}\n                \n                <div className=\"flex justify-end space-x-3\">\n                  <Button variant=\"outline\" onClick={() => setIsDetailsModalOpen(false)}>\n                    Close\n                  </Button>\n                  <Button className=\"bg-primary-500 hover:bg-primary-600\">\n                    Invest Now\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Purchase Confirmation Modal */}\n        <Dialog open={isPurchaseModalOpen} onOpenChange={setIsPurchaseModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Confirm Purchase</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to purchase this security?\n              </DialogDescription>\n            </DialogHeader>\n            {selectedSecurity && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">{selectedSecurity.title}</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-600\">Investment Amount:</span>\n                      <p className=\"font-medium\">{selectedSecurity.currency} {parseFloat(selectedSecurity.totalValue).toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Expected Return:</span>\n                      <p className=\"font-medium text-green-600\">{selectedSecurity.expectedReturn ? `${selectedSecurity.expectedReturn}%` : 'N/A'}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Duration:</span>\n                      <p className=\"font-medium\">{selectedSecurity.duration}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-600\">Risk Grade:</span>\n                      <Badge variant={\n                        selectedSecurity.riskGrade?.startsWith('A') ? 'default' :\n                        selectedSecurity.riskGrade?.startsWith('B') ? 'secondary' : 'destructive'\n                      }>\n                        {selectedSecurity.riskGrade || 'Not Rated'}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end space-x-3\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsPurchaseModalOpen(false)}\n                    disabled={purchaseMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleConfirmPurchase}\n                    disabled={purchaseMutation.isPending}\n                    className=\"bg-primary-500 hover:bg-primary-600\"\n                  >\n                    {purchaseMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                        Confirm Purchase\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Legal Agreement Modal */}\n        <Dialog open={isAgreementModalOpen} onOpenChange={setIsAgreementModalOpen}>\n          <DialogContent className=\"sm:max-w-[700px] max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Legal Agreement Placeholder\n              </DialogTitle>\n              <DialogDescription>\n                This document represents a placeholder for a legally binding agreement\n              </DialogDescription>\n            </DialogHeader>\n            {selectedSecurity && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <Shield className=\"w-5 h-5 text-yellow-600\" />\n                    </div>\n                    <div className=\"ml-3\">\n                      <h3 className=\"text-sm font-medium text-yellow-800\">\n                        Legal Disclaimer\n                      </h3>\n                      <div className=\"mt-2 text-sm text-yellow-700\">\n                        <p>This is a placeholder document for demonstration purposes only. In a real-world scenario, this would be a legally binding agreement drafted by qualified legal professionals.</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border border-gray-200 rounded-lg p-6 bg-white\">\n                  <div className=\"text-center mb-6\">\n                    <h2 className=\"text-xl font-bold text-gray-900\">TRADE RECEIVABLE SECURITY PURCHASE AGREEMENT</h2>\n                    <p className=\"text-sm text-gray-500 mt-2\">[PLACEHOLDER DOCUMENT]</p>\n                  </div>\n\n                  <div className=\"space-y-4 text-sm text-gray-700 leading-relaxed\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">PARTIES TO THE AGREEMENT</h3>\n                      <p><strong>Merchant (Seller):</strong> {user?.firstName ? `${user.firstName} ${user.lastName || ''}` : '[Merchant Name Placeholder]'}</p>\n                      <p><strong>Investor (Purchaser):</strong> {user?.firstName ? `${user.firstName} ${user.lastName || ''}` : '[Investor Name Placeholder]'}</p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">SECURITY DETAILS</h3>\n                      <p><strong>Security ID:</strong> {selectedSecurity.id}</p>\n                      <p><strong>Security Title:</strong> {selectedSecurity.title}</p>\n                      <p><strong>Total Value:</strong> {selectedSecurity.currency} {parseFloat(selectedSecurity.totalValue).toLocaleString()}</p>\n                      <p><strong>Expected Return:</strong> {selectedSecurity.expectedReturn ? `${selectedSecurity.expectedReturn}%` : 'N/A'}</p>\n                      <p><strong>Duration:</strong> {selectedSecurity.duration}</p>\n                      <p><strong>Risk Grade:</strong> {selectedSecurity.riskGrade || 'Not Rated'}</p>\n                      <p><strong>Purchase Date:</strong> {format(new Date(selectedSecurity.purchasedAt || new Date()), \"MMMM dd, yyyy\")}</p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">AGREEMENT TERMS</h3>\n                      <p>This document represents a placeholder for a legally binding agreement between the above-mentioned parties for the purchase of Trade Receivable Security ID {selectedSecurity.id}.</p>\n                      \n                      <p className=\"mt-3\">In a real-world scenario, this agreement would include:</p>\n                      <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n                        <li>Detailed terms and conditions of the security purchase</li>\n                        <li>Rights and obligations of both parties</li>\n                        <li>Payment terms and settlement procedures</li>\n                        <li>Risk disclosure and investor protections</li>\n                        <li>Dispute resolution mechanisms</li>\n                        <li>Regulatory compliance requirements</li>\n                        <li>Legal enforceability provisions</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">LEGAL NOTICE</h3>\n                      <p className=\"text-red-600 font-medium\">This is a demonstration placeholder only. Any actual legal agreement would require:</p>\n                      <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1 text-red-600\">\n                        <li>Professional legal review and drafting</li>\n                        <li>Compliance with applicable securities laws</li>\n                        <li>Proper notarization and witnessing</li>\n                        <li>Regulatory approval where required</li>\n                      </ul>\n                    </div>\n\n                    <div className=\"border-t border-gray-200 pt-4 mt-6\">\n                      <p className=\"text-xs text-gray-500 text-center\">\n                        Document Generated: {format(new Date(), \"MMMM dd, yyyy 'at' h:mm a\")}<br/>\n                        Security Reference: {selectedSecurity.id}<br/>\n                        Platform: SecureReceivables Demo System\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsAgreementModalOpen(false)}\n                  >\n                    Close Agreement\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":51306},"client/src/pages/landing.tsx":{"content":"import { TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Header from \"@/components/Header\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <div className=\"w-16 h-16 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <TrendingUp className=\"text-white h-8 w-8\" />\n                </div>\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Welcome to SecureReceivables</h2>\n                <p className=\"text-gray-600\">Your trusted platform for receivables securitization and investment opportunities</p>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <Button \n                  onClick={handleLogin}\n                  className=\"w-full bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\n                >\n                  Sign In\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  onClick={handleLogin}\n                  className=\"w-full hover:bg-gray-50 text-primary-500 font-medium py-3 px-4 rounded-lg border-2 border-primary-500 transition-colors\"\n                >\n                  Create Account\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1902},"client/src/pages/merchant-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { LogOut, FileText, Shield, Layers, Star, Receipt, Plus, BarChart, Settings, Calendar, DollarSign, Trash2, Edit, Lock, TrendingUp, Eye, Filter, CheckCircle, AlertTriangle, Clock, XCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { createReceivableSchema, createSecuritySchema, type CreateReceivable, type CreateSecurity, type Receivable, type Security } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport Header from \"@/components/Header\";\nimport NotificationCenter from \"@/components/NotificationCenter\";\nimport EmptyState from \"@/components/EmptyState\";\nimport LoadingSpinner from \"@/components/LoadingSpinner\";\nimport SkeletonCard from \"@/components/SkeletonCard\";\n\nexport default function MerchantDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isSecuritizeModalOpen, setIsSecuritizeModalOpen] = useState(false);\n  const [isAgreementModalOpen, setIsAgreementModalOpen] = useState(false);\n  const [selectedReceivable, setSelectedReceivable] = useState<Receivable | null>(null);\n  const [selectedSecurity, setSelectedSecurity] = useState<Security | null>(null);\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  const form = useForm<CreateReceivable>({\n    resolver: zodResolver(createReceivableSchema.extend({\n      amount: createReceivableSchema.shape.amount.refine(\n        (val) => parseFloat(val) > 0,\n        { message: \"Amount must be greater than 0\" }\n      ),\n      dueDate: createReceivableSchema.shape.dueDate.refine(\n        (val) => new Date(val) > new Date(),\n        { message: \"Due date must be in the future\" }\n      ),\n    })),\n    defaultValues: {\n      debtorName: \"\",\n      amount: \"\",\n      currency: \"USD\",\n      dueDate: \"\",\n      description: \"\",\n    },\n    mode: \"onChange\", // Enable real-time validation\n  });\n\n  const securitizeForm = useForm<CreateSecurity>({\n    resolver: zodResolver(createSecuritySchema.extend({\n      totalValue: createSecuritySchema.shape.totalValue.refine(\n        (val) => parseFloat(val) > 0,\n        { message: \"Total value must be greater than 0\" }\n      ),\n      expectedReturn: createSecuritySchema.shape.expectedReturn?.refine(\n        (val) => !val || (parseFloat(val) >= 0 && parseFloat(val) <= 100),\n        { message: \"Expected return must be between 0% and 100%\" }\n      ),\n      duration: createSecuritySchema.shape.duration.refine(\n        (val) => parseInt(val) > 0,\n        { message: \"Duration must be greater than 0 days\" }\n      ),\n    })),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      totalValue: \"\",\n      expectedReturn: \"\",\n      riskGrade: \"B\",\n      duration: \"\",\n    },\n    mode: \"onChange\",\n  });\n\n  // Fetch receivables\n  const { data: receivables = [], isLoading: receivablesLoading } = useQuery<Receivable[]>({\n    queryKey: [\"/api/receivables\"],\n    enabled: !!user && user.role === \"merchant\",\n    retry: false,\n  });\n\n  // Fetch securities\n  const { data: securities = [], isLoading: securitiesLoading } = useQuery<Security[]>({\n    queryKey: [\"/api/securities\"],\n    enabled: !!user && user.role === \"merchant\",\n    retry: false,\n  });\n\n  // Create receivable mutation\n  const createReceivableMutation = useMutation({\n    mutationFn: async (data: CreateReceivable) => {\n      const response = await apiRequest(\"POST\", \"/api/receivables\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Receivable created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/receivables\"] });\n      setIsAddModalOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create receivable. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete receivable mutation\n  const deleteReceivableMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/receivables/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Receivable deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/receivables\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete receivable. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Securitize receivable mutation\n  const securitizeMutation = useMutation({\n    mutationFn: async ({ receivableId, data }: { receivableId: string; data: CreateSecurity }) => {\n      const response = await apiRequest(\"POST\", `/api/securities/securitize/${receivableId}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Receivable securitized successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/receivables\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/securities\"] });\n      setIsSecuritizeModalOpen(false);\n      setSelectedReceivable(null);\n      securitizeForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to securitize receivable. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // List security mutation\n  const listSecurityMutation = useMutation({\n    mutationFn: async (securityId: string) => {\n      const response = await apiRequest(\"POST\", `/api/securities/${securityId}/list`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Security listed on marketplace successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/receivables\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/securities\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to list security. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark as paid mutation\n  const markAsPaidMutation = useMutation({\n    mutationFn: async (securityId: string) => {\n      const response = await apiRequest(\"POST\", `/api/securities/${securityId}/mark-paid`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment Processed\",\n        description: \"Security marked as paid! Funds transferred to investor.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/securities\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/receivables\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark security as paid. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateReceivable) => {\n    createReceivableMutation.mutate(data);\n  };\n\n  const onSecuritizeSubmit = (data: CreateSecurity) => {\n    if (!selectedReceivable) return;\n    securitizeMutation.mutate({ receivableId: selectedReceivable.id, data });\n  };\n\n  const handleDeleteReceivable = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this receivable?\")) {\n      deleteReceivableMutation.mutate(id);\n    }\n  };\n\n  const handleSecuritize = (receivable: Receivable) => {\n    setSelectedReceivable(receivable);\n    // Pre-fill form with receivable data\n    securitizeForm.setValue(\"title\", `${receivable.debtorName} Trade Receivable`);\n    securitizeForm.setValue(\"totalValue\", receivable.amount);\n    securitizeForm.setValue(\"description\", receivable.description || `Trade receivable from ${receivable.debtorName} due ${format(new Date(receivable.dueDate), \"MMM dd, yyyy\")}`);\n    setIsSecuritizeModalOpen(true);\n  };\n\n  const handleViewAgreement = (security: Security) => {\n    setSelectedSecurity(security);\n    setIsAgreementModalOpen(true);\n  };\n\n  const handleListSecurity = (securityId: string) => {\n    if (confirm(\"Are you sure you want to list this security on the marketplace? This action cannot be undone.\")) {\n      listSecurityMutation.mutate(securityId);\n    }\n  };\n\n  // Find security for receivable\n  const getSecurityForReceivable = (receivableId: string) => {\n    return securities.find(s => s.receivableId === receivableId);\n  };\n\n  // Helper function to get status badge variant and icon\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case \"draft\":\n        return { variant: \"secondary\" as const, icon: Edit, color: \"text-gray-600\" };\n      case \"securitized\":\n        return { variant: \"outline\" as const, icon: Shield, color: \"text-blue-600\" };\n      case \"listed\":\n        return { variant: \"default\" as const, icon: TrendingUp, color: \"text-green-600\" };\n      case \"purchased\":\n        return { variant: \"default\" as const, icon: CheckCircle, color: \"text-blue-600\" };\n      case \"payment_due\":\n        return { variant: \"destructive\" as const, icon: AlertTriangle, color: \"text-orange-600\" };\n      case \"paid\":\n        return { variant: \"default\" as const, icon: CheckCircle, color: \"text-green-600\" };\n      case \"cancelled\":\n        return { variant: \"secondary\" as const, icon: XCircle, color: \"text-red-600\" };\n      default:\n        return { variant: \"secondary\" as const, icon: Clock, color: \"text-gray-600\" };\n    }\n  };\n\n  // Filter receivables based on status\n  const filteredReceivables = statusFilter === \"all\" \n    ? receivables \n    : receivables.filter(r => {\n        const security = getSecurityForReceivable(r.id);\n        if (statusFilter === \"draft\") return r.status === \"draft\" || r.status === \"active\";\n        if (statusFilter === \"securitized\") return r.status === \"securitized\";\n        if (statusFilter === \"listed\") return r.status === \"listed\";\n        if (statusFilter === \"sold\") return security?.status === \"purchased\";\n        return false;\n      });\n\n  // Calculate totals\n  const totalReceivables = receivables.reduce((sum, r) => sum + parseFloat(r.amount), 0);\n  const activeReceivables = receivables.filter(r => r.status === \"draft\" || r.status === \"active\").length;\n  const securitizedAmount = receivables\n    .filter(r => r.status === \"securitized\" || r.status === \"listed\")\n    .reduce((sum, r) => sum + parseFloat(r.amount), 0);\n  const listedSecurities = securities.filter(s => s.status === \"listed\").length;\n  const soldSecurities = securities.filter(s => s.status === \"purchased\").length;\n\n  // Redirect if not authenticated or not a merchant\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n    \n    if (!isLoading && user && user.role !== \"merchant\") {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access the merchant dashboard.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header showNav={false} />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Merchant Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">Welcome back! Ready to securitize your receivables?</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <NotificationCenter />\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = \"/profile\"}\n              className=\"bg-white hover:bg-gray-50 text-gray-700 px-4 py-2 rounded-lg transition-colors flex items-center\"\n            >\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Profile & Settings\n            </Button>\n            <Button \n              onClick={handleLogout}\n              variant=\"outline\"\n              className=\"bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition-colors flex items-center\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Receivables</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">${totalReceivables.toLocaleString()}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-5 h-5 text-primary-500\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">{receivables.length} total receivables</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Securitized Amount</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">${securitizedAmount.toLocaleString()}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-success-500\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">{receivables.filter(r => r.status === \"securitized\").length} securitized</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Active Receivables</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{activeReceivables}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Layers className=\"w-5 h-5 text-accent-500\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Available for securitization</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Listed Securities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{listedSecurities}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-5 h-5 text-indigo-500\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">On marketplace</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Sold Securities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{soldSecurities}</p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-blue-500\" />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className=\"text-gray-600\">Completed transactions</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-white rounded-xl shadow-sm border border-gray-200\">\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">Your Receivables</CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40\">\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"securitized\">Securitized</SelectItem>\n                      <SelectItem value=\"listed\">Listed</SelectItem>\n                      <SelectItem value=\"sold\">Sold</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-primary-500 hover:bg-primary-600 text-white\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Receivable\n                      </Button>\n                    </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-[500px]\">\n                    <DialogHeader>\n                      <DialogTitle>Add New Receivable</DialogTitle>\n                      <DialogDescription>\n                        Create a new trade receivable for securitization.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"debtorName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Debtor Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Company or individual name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"amount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Amount</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"0.00\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"currency\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Currency</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select currency\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"USD\">USD</SelectItem>\n                                    <SelectItem value=\"EUR\">EUR</SelectItem>\n                                    <SelectItem value=\"GBP\">GBP</SelectItem>\n                                    <SelectItem value=\"INR\">INR</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"dueDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Due Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"category\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Category</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select category\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"Manufacturing\">Manufacturing</SelectItem>\n                                    <SelectItem value=\"Retail\">Retail</SelectItem>\n                                    <SelectItem value=\"Technology\">Technology</SelectItem>\n                                    <SelectItem value=\"Services\">Services</SelectItem>\n                                    <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                                    <SelectItem value=\"Finance\">Finance</SelectItem>\n                                    <SelectItem value=\"Construction\">Construction</SelectItem>\n                                    <SelectItem value=\"Agriculture\">Agriculture</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"riskLevel\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Risk Level</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select risk level\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"Low\">Low Risk</SelectItem>\n                                    <SelectItem value=\"Medium\">Medium Risk</SelectItem>\n                                    <SelectItem value=\"High\">High Risk</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description (Optional)</FormLabel>\n                              <FormControl>\n                                <Textarea placeholder=\"Additional notes about this receivable\" {...field} value={field.value || \"\"} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <Button \n                          type=\"submit\" \n                          className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                          disabled={createReceivableMutation.isPending}\n                        >\n                          {createReceivableMutation.isPending ? \"Creating...\" : \"Create Receivable\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              \n              {/* Securitization Modal */}\n              <Dialog open={isSecuritizeModalOpen} onOpenChange={setIsSecuritizeModalOpen}>\n                <DialogContent className=\"sm:max-w-[600px]\">\n                  <DialogHeader>\n                    <DialogTitle>Securitize Receivable</DialogTitle>\n                    <DialogDescription>\n                      Convert your receivable into a tradeable security for the marketplace.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...securitizeForm}>\n                    <form onSubmit={securitizeForm.handleSubmit(onSecuritizeSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={securitizeForm.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Security Title</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Descriptive title for investors\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={securitizeForm.control}\n                          name=\"totalValue\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Total Value</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"0.00\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={securitizeForm.control}\n                          name=\"expectedReturn\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Expected Return (%)</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"5.5\" {...field} value={field.value || \"\"} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={securitizeForm.control}\n                          name=\"riskGrade\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Risk Grade</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value || undefined}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select risk grade\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"A\">A - Low Risk</SelectItem>\n                                  <SelectItem value=\"A-\">A- - Low Risk</SelectItem>\n                                  <SelectItem value=\"B+\">B+ - Medium Risk</SelectItem>\n                                  <SelectItem value=\"B\">B - Medium Risk</SelectItem>\n                                  <SelectItem value=\"B-\">B- - Medium Risk</SelectItem>\n                                  <SelectItem value=\"C+\">C+ - High Risk</SelectItem>\n                                  <SelectItem value=\"C\">C - High Risk</SelectItem>\n                                  <SelectItem value=\"C-\">C- - High Risk</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={securitizeForm.control}\n                          name=\"duration\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Duration</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., 90 days, 6 months\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={securitizeForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Investment Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Detailed description for potential investors\" \n                                {...field} \n                                value={field.value || \"\"} \n                                rows={3}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <Button \n                        type=\"submit\" \n                        className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                        disabled={securitizeMutation.isPending}\n                      >\n                        {securitizeMutation.isPending ? \"Securitizing...\" : \"Securitize Receivable\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n              <CardContent>\n                {receivablesLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <SkeletonCard key={i} lines={2} className=\"animate-fade-in\" />\n                    ))}\n                  </div>\n                ) : filteredReceivables.length === 0 ? (\n                  <EmptyState\n                    icon={Receipt}\n                    title={statusFilter === \"all\" ? \"No receivables yet\" : \"No receivables found\"}\n                    description={statusFilter === \"all\" \n                      ? \"Create your first receivable to start securitizing and managing your trade finances.\"\n                      : `No receivables match the '${statusFilter}' status. Try adjusting your filter or create a new receivable.`\n                    }\n                    actionLabel={statusFilter === \"all\" ? \"Add Your First Receivable\" : \"Clear Filter\"}\n                    onAction={() => statusFilter === \"all\" ? setIsAddModalOpen(true) : setStatusFilter(\"all\")}\n                  />\n                ) : (\n                  <div className=\"space-y-3\">\n                    {filteredReceivables.map((receivable) => {\n                      const security = getSecurityForReceivable(receivable.id);\n                      const canSecuritize = receivable.status === \"draft\" || receivable.status === \"active\";\n                      const isSecuritized = receivable.status === \"securitized\";\n                      const isListed = receivable.status === \"listed\";\n                      \n                      return (\n                        <div key={receivable.id} className=\"border border-gray-200 rounded-lg p-4 card-hover animate-slide-up\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                                <Receipt className=\"w-5 h-5 text-primary-500\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-gray-900\">{receivable.debtorName}</p>\n                                <p className=\"text-sm text-gray-600\">{receivable.currency} {parseFloat(receivable.amount).toLocaleString()}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              {(() => {\n                                const security = getSecurityForReceivable(receivable.id);\n                                const displayStatus = security?.status === \"purchased\" ? \"sold\" : receivable.status;\n                                const statusInfo = getStatusInfo(displayStatus);\n                                const StatusIcon = statusInfo.icon;\n                                \n                                return (\n                                  <Badge variant={statusInfo.variant} className=\"flex items-center space-x-1\">\n                                    <StatusIcon className=\"w-3 h-3\" />\n                                    <span className=\"capitalize\">{displayStatus.replace('_', ' ')}</span>\n                                  </Badge>\n                                );\n                              })()}\n                              <p className=\"text-sm text-gray-600\">Due: {format(new Date(receivable.dueDate), \"MMM dd, yyyy\")}</p>\n                              \n                              {/* Action buttons based on status */}\n                              {canSecuritize && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleSecuritize(receivable)}\n                                  className=\"text-primary-600 hover:text-primary-700 hover:bg-primary-50 btn-hover\"\n                                >\n                                  <Lock className=\"w-4 h-4 mr-1\" />\n                                  Securitize\n                                </Button>\n                              )}\n                              \n                              {isSecuritized && security && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleListSecurity(security.id)}\n                                  disabled={listSecurityMutation.isPending}\n                                  className={`text-green-600 hover:text-green-700 hover:bg-green-50 btn-hover ${listSecurityMutation.isPending ? 'btn-loading' : ''}`}\n                                >\n                                  {listSecurityMutation.isPending && <LoadingSpinner size=\"sm\" className=\"mr-1\" />}\n                                  {!listSecurityMutation.isPending && <TrendingUp className=\"w-4 h-4 mr-1\" />}\n                                  {listSecurityMutation.isPending ? \"Listing...\" : \"List for Sale\"}\n                                </Button>\n                              )}\n                              \n                              {isListed && (\n                                <div className=\"flex items-center text-sm text-green-600\">\n                                  <TrendingUp className=\"w-4 h-4 mr-1\" />\n                                  On Marketplace\n                                </div>\n                              )}\n                              \n                              {security && security.status === \"purchased\" && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"flex items-center text-sm text-blue-600\">\n                                    <Shield className=\"w-4 h-4 mr-1\" />\n                                    Sold\n                                  </div>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleViewAgreement(security)}\n                                    className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                                  >\n                                    <FileText className=\"w-4 h-4 mr-1\" />\n                                    View Agreement\n                                  </Button>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => markAsPaidMutation.mutate(security.id)}\n                                    disabled={markAsPaidMutation.isPending}\n                                    className={`text-green-600 hover:text-green-700 hover:bg-green-50 btn-hover ${markAsPaidMutation.isPending ? 'btn-loading' : ''}`}\n                                  >\n                                    <DollarSign className=\"w-4 h-4 mr-1\" />\n                                    {markAsPaidMutation.isPending ? \"Processing...\" : \"Mark as Paid\"}\n                                  </Button>\n                                </div>\n                              )}\n                              \n                              {security && security.status === \"paid\" && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <div className=\"flex items-center text-sm text-green-600\">\n                                    <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                    Payment Complete\n                                  </div>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={() => handleViewAgreement(security)}\n                                    className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                                  >\n                                    <FileText className=\"w-4 h-4 mr-1\" />\n                                    View Agreement\n                                  </Button>\n                                </div>\n                              )}\n                              \n                              {(canSecuritize) && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteReceivable(receivable.id)}\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                          {receivable.description && (\n                            <p className=\"mt-2 text-sm text-gray-600 ml-13\">{receivable.description}</p>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-primary-500 to-primary-600 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n                <div className=\"space-y-3\">\n                  <Button \n                    variant=\"ghost\"\n                    onClick={() => setIsAddModalOpen(true)}\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-3\" />\n                    Add Receivable\n                  </Button>\n                  <Button \n                    variant=\"ghost\"\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <BarChart className=\"w-4 h-4 mr-3\" />\n                    View Analytics\n                  </Button>\n                  <Button \n                    variant=\"ghost\"\n                    className=\"w-full bg-white bg-opacity-20 hover:bg-opacity-30 text-white py-2 px-4 rounded-lg transition-colors text-left justify-start\"\n                  >\n                    <Settings className=\"w-4 h-4 mr-3\" />\n                    Settings\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Legal Agreement Modal */}\n        <Dialog open={isAgreementModalOpen} onOpenChange={setIsAgreementModalOpen}>\n          <DialogContent className=\"sm:max-w-[700px] max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Legal Agreement Placeholder\n              </DialogTitle>\n              <DialogDescription>\n                This document represents a placeholder for a legally binding agreement\n              </DialogDescription>\n            </DialogHeader>\n            {selectedSecurity && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <Shield className=\"w-5 h-5 text-yellow-600\" />\n                    </div>\n                    <div className=\"ml-3\">\n                      <h3 className=\"text-sm font-medium text-yellow-800\">\n                        Legal Disclaimer\n                      </h3>\n                      <div className=\"mt-2 text-sm text-yellow-700\">\n                        <p>This is a placeholder document for demonstration purposes only. In a real-world scenario, this would be a legally binding agreement drafted by qualified legal professionals.</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border border-gray-200 rounded-lg p-6 bg-white\">\n                  <div className=\"text-center mb-6\">\n                    <h2 className=\"text-xl font-bold text-gray-900\">TRADE RECEIVABLE SECURITY PURCHASE AGREEMENT</h2>\n                    <p className=\"text-sm text-gray-500 mt-2\">[PLACEHOLDER DOCUMENT]</p>\n                  </div>\n\n                  <div className=\"space-y-4 text-sm text-gray-700 leading-relaxed\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">PARTIES TO THE AGREEMENT</h3>\n                      <p><strong>Merchant (Seller):</strong> {user?.firstName ? `${user.firstName} ${user.lastName || ''}` : '[Merchant Name Placeholder]'}</p>\n                      <p><strong>Investor (Purchaser):</strong> [Investor Name Placeholder]</p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">SECURITY DETAILS</h3>\n                      <p><strong>Security ID:</strong> {selectedSecurity.id}</p>\n                      <p><strong>Security Title:</strong> {selectedSecurity.title}</p>\n                      <p><strong>Total Value:</strong> {selectedSecurity.currency} {parseFloat(selectedSecurity.totalValue).toLocaleString()}</p>\n                      <p><strong>Expected Return:</strong> {selectedSecurity.expectedReturn ? `${selectedSecurity.expectedReturn}%` : 'N/A'}</p>\n                      <p><strong>Duration:</strong> {selectedSecurity.duration}</p>\n                      <p><strong>Risk Grade:</strong> {selectedSecurity.riskGrade || 'Not Rated'}</p>\n                      <p><strong>Purchase Date:</strong> {format(new Date(selectedSecurity.purchasedAt || new Date()), \"MMMM dd, yyyy\")}</p>\n                      <p><strong>Status:</strong> Purchased</p>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">AGREEMENT TERMS</h3>\n                      <p>This document represents a placeholder for a legally binding agreement between the above-mentioned parties for the purchase of Trade Receivable Security ID {selectedSecurity.id}.</p>\n                      \n                      <p className=\"mt-3\">In a real-world scenario, this agreement would include:</p>\n                      <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n                        <li>Detailed terms and conditions of the security purchase</li>\n                        <li>Rights and obligations of both parties</li>\n                        <li>Payment terms and settlement procedures</li>\n                        <li>Risk disclosure and investor protections</li>\n                        <li>Dispute resolution mechanisms</li>\n                        <li>Regulatory compliance requirements</li>\n                        <li>Legal enforceability provisions</li>\n                        <li>Transfer of receivable ownership rights</li>\n                        <li>Collection and payment processing procedures</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">MERCHANT OBLIGATIONS</h3>\n                      <p>As the merchant who securitized this receivable, the following obligations would typically apply:</p>\n                      <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1\">\n                        <li>Warranty of receivable authenticity and validity</li>\n                        <li>Notification of debtor regarding ownership transfer</li>\n                        <li>Cooperation in collection activities if required</li>\n                        <li>Provision of all relevant documentation</li>\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 mb-2\">LEGAL NOTICE</h3>\n                      <p className=\"text-red-600 font-medium\">This is a demonstration placeholder only. Any actual legal agreement would require:</p>\n                      <ul className=\"list-disc list-inside ml-4 mt-2 space-y-1 text-red-600\">\n                        <li>Professional legal review and drafting</li>\n                        <li>Compliance with applicable securities laws</li>\n                        <li>Proper notarization and witnessing</li>\n                        <li>Regulatory approval where required</li>\n                        <li>Due diligence verification</li>\n                      </ul>\n                    </div>\n\n                    <div className=\"border-t border-gray-200 pt-4 mt-6\">\n                      <p className=\"text-xs text-gray-500 text-center\">\n                        Document Generated: {format(new Date(), \"MMMM dd, yyyy 'at' h:mm a\")}<br/>\n                        Security Reference: {selectedSecurity.id}<br/>\n                        Platform: SecureReceivables Demo System<br/>\n                        Merchant View\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setIsAgreementModalOpen(false)}\n                  >\n                    Close Agreement\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":53959},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { User, Settings, Save, ArrowLeft, Phone, MapPin, CreditCard, Mail, UserCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { updateProfileSchema, type UpdateProfile } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [location, setLocation] = useLocation();\n  const [hasLocalChanges, setHasLocalChanges] = useState(false);\n\n  const form = useForm<UpdateProfile>({\n    resolver: zodResolver(updateProfileSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n      address: \"\",\n    },\n  });\n\n  // Load profile data and check for local storage data\n  useEffect(() => {\n    if (user) {\n      const localStorageKey = `profile_${user.id}`;\n      const localData = localStorage.getItem(localStorageKey);\n      \n      if (localData) {\n        try {\n          const parsedData = JSON.parse(localData);\n          form.reset({\n            firstName: parsedData.firstName || user.firstName || \"\",\n            lastName: parsedData.lastName || user.lastName || \"\",\n            phoneNumber: parsedData.phoneNumber || user.phoneNumber || \"\",\n            address: parsedData.address || user.address || \"\",\n          });\n          setHasLocalChanges(true);\n        } catch (error) {\n          console.error(\"Error parsing local storage data:\", error);\n          // Fall back to user data\n          form.reset({\n            firstName: user.firstName || \"\",\n            lastName: user.lastName || \"\",\n            phoneNumber: user.phoneNumber || \"\",\n            address: user.address || \"\",\n          });\n        }\n      } else {\n        form.reset({\n          firstName: user.firstName || \"\",\n          lastName: user.lastName || \"\",\n          phoneNumber: user.phoneNumber || \"\",\n          address: user.address || \"\",\n        });\n      }\n    }\n  }, [user, form]);\n\n  // Save to local storage on form change\n  const watchedValues = form.watch();\n  useEffect(() => {\n    if (user && Object.keys(watchedValues).some(key => watchedValues[key as keyof UpdateProfile])) {\n      const localStorageKey = `profile_${user.id}`;\n      localStorage.setItem(localStorageKey, JSON.stringify(watchedValues));\n      \n      // Check if there are changes from the original user data\n      const hasChanges = \n        watchedValues.firstName !== (user.firstName || \"\") ||\n        watchedValues.lastName !== (user.lastName || \"\") ||\n        watchedValues.phoneNumber !== (user.phoneNumber || \"\") ||\n        watchedValues.address !== (user.address || \"\");\n      \n      setHasLocalChanges(hasChanges);\n    }\n  }, [watchedValues, user]);\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UpdateProfile) => {\n      const response = await apiRequest(\"PUT\", \"/api/profile\", data);\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been saved successfully!\",\n      });\n      \n      // Clear local storage after successful save\n      if (user) {\n        localStorage.removeItem(`profile_${user.id}`);\n        setHasLocalChanges(false);\n      }\n      \n      // Update the user data in the cache\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UpdateProfile) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleGoBack = () => {\n    if (user?.role === \"merchant\") {\n      setLocation(\"/\");\n    } else if (user?.role === \"investor\") {\n      setLocation(\"/\");\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Access Denied</h2>\n          <p className=\"text-gray-600\">Please log in to access your profile.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleGoBack}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Dashboard</span>\n            </Button>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Profile & Settings</h1>\n              <p className=\"text-gray-600\">Manage your account information</p>\n            </div>\n          </div>\n          {hasLocalChanges && (\n            <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\n              Unsaved Changes\n            </Badge>\n          )}\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Profile Overview */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <UserCircle className=\"w-5 h-5\" />\n                  <span>Account Overview</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-20 h-20 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <User className=\"w-10 h-10 text-primary-600\" />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-900\">\n                    {user.firstName || user.lastName ? \n                      `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim() : \n                      \"User\"\n                    }\n                  </h3>\n                  <Badge \n                    variant={user.role === \"merchant\" ? \"default\" : \"secondary\"}\n                    className=\"mt-2\"\n                  >\n                    {user.role?.charAt(0).toUpperCase() + user.role?.slice(1)}\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-3 pt-4 border-t\">\n                  <div className=\"flex items-center space-x-3 text-sm\">\n                    <Mail className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-gray-600\">{user.email}</span>\n                  </div>\n                  \n                  {user.phoneNumber && (\n                    <div className=\"flex items-center space-x-3 text-sm\">\n                      <Phone className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-600\">{user.phoneNumber}</span>\n                    </div>\n                  )}\n                  \n                  {user.address && (\n                    <div className=\"flex items-start space-x-3 text-sm\">\n                      <MapPin className=\"w-4 h-4 text-gray-400 mt-0.5\" />\n                      <span className=\"text-gray-600\">{user.address}</span>\n                    </div>\n                  )}\n                  \n                  {user.role === \"investor\" && (\n                    <div className=\"flex items-center space-x-3 text-sm\">\n                      <CreditCard className=\"w-4 h-4 text-gray-400\" />\n                      <span className=\"text-gray-600\">\n                        Wallet: ${user.walletBalance ? parseFloat(user.walletBalance).toLocaleString() : \"0.00\"}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Bank Details Placeholder */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CreditCard className=\"w-5 h-5\" />\n                  <span>Payment Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <CreditCard className=\"w-8 h-8 text-gray-400 mx-auto mb-3\" />\n                  <h4 className=\"font-medium text-gray-900 mb-2\">Bank Account Details</h4>\n                  <p className=\"text-sm text-gray-500\">\n                    For payments/receipts - not implemented\n                  </p>\n                  <p className=\"text-xs text-gray-400 mt-2\">\n                    This section would contain secure banking information in a production environment\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profile Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  <span>Personal Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your first name\" {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter your last name\" {...field} value={field.value || \"\"} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"phoneNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter your phone number\" \n                              type=\"tel\"\n                              {...field} \n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Address</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Enter your full address\"\n                              rows={3}\n                              {...field} \n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          form.reset({\n                            firstName: user.firstName || \"\",\n                            lastName: user.lastName || \"\",\n                            phoneNumber: user.phoneNumber || \"\",\n                            address: user.address || \"\",\n                          });\n                          if (user) {\n                            localStorage.removeItem(`profile_${user.id}`);\n                            setHasLocalChanges(false);\n                          }\n                        }}\n                      >\n                        Reset Changes\n                      </Button>\n                      \n                      <Button \n                        type=\"submit\" \n                        disabled={updateProfileMutation.isPending || !hasLocalChanges}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Save className=\"w-4 h-4\" />\n                        <span>\n                          {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </span>\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15256},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Store, PieChart, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\nimport Header from \"@/components/Header\";\n\nexport default function Register() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [termsAccepted, setTermsAccepted] = useState(false);\n\n  const form = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      role: undefined,\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to SecureReceivables! Redirecting to your dashboard...\",\n      });\n      // Invalidate user query to refetch updated user data\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"An error occurred during registration. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterUser) => {\n    if (!termsAccepted) {\n      toast({\n        title: \"Terms required\",\n        description: \"Please accept the Terms of Service and Privacy Policy to continue.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    registerMutation.mutate(data);\n  };\n\n  const handleBack = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header showNav={false} />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-200\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Complete Your Profile</h2>\n                <p className=\"text-gray-600\">Join our platform and start your financial journey</p>\n              </div>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm font-medium text-gray-700\">First Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              value={field.value || \"\"}\n                              placeholder=\"John\"\n                              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-sm font-medium text-gray-700\">Last Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              value={field.value || \"\"}\n                              placeholder=\"Doe\"\n                              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">Email Address</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field}\n                            value={field.value || \"\"}\n                            type=\"email\"\n                            placeholder=\"john.doe@example.com\"\n                            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700 mb-4 block\">Account Type</FormLabel>\n                        <FormControl>\n                          <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className=\"grid grid-cols-2 gap-4\">\n                            <FormItem className=\"relative\">\n                              <FormControl>\n                                <RadioGroupItem \n                                  value=\"merchant\" \n                                  className=\"sr-only\"\n                                />\n                              </FormControl>\n                              <FormLabel className=\"relative flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-primary-500 transition-colors data-[state=checked]:border-primary-500 data-[state=checked]:bg-primary-50\">\n                                <div className=\"flex flex-col items-center text-center w-full\">\n                                  <Store className=\"h-8 w-8 text-primary-500 mb-2\" />\n                                  <span className=\"font-medium text-gray-900\">Merchant</span>\n                                  <span className=\"text-xs text-gray-600 mt-1\">Securitize receivables</span>\n                                </div>\n                              </FormLabel>\n                            </FormItem>\n                            \n                            <FormItem className=\"relative\">\n                              <FormControl>\n                                <RadioGroupItem \n                                  value=\"investor\" \n                                  className=\"sr-only\"\n                                />\n                              </FormControl>\n                              <FormLabel className=\"relative flex items-center p-4 border-2 border-gray-200 rounded-lg cursor-pointer hover:border-primary-500 transition-colors data-[state=checked]:border-primary-500 data-[state=checked]:bg-primary-50\">\n                                <div className=\"flex flex-col items-center text-center w-full\">\n                                  <PieChart className=\"h-8 w-8 text-success-500 mb-2\" />\n                                  <span className=\"font-medium text-gray-900\">Investor</span>\n                                  <span className=\"text-xs text-gray-600 mt-1\">Explore opportunities</span>\n                                </div>\n                              </FormLabel>\n                            </FormItem>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"terms\" \n                      checked={termsAccepted}\n                      onCheckedChange={(checked) => setTermsAccepted(checked === true)}\n                      className=\"h-4 w-4 text-primary-500 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"terms\" className=\"text-sm text-gray-700\">\n                      I agree to the <a href=\"#\" className=\"text-primary-500 hover:text-primary-600\">Terms of Service</a> and <a href=\"#\" className=\"text-primary-500 hover:text-primary-600\">Privacy Policy</a>\n                    </label>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    disabled={registerMutation.isPending}\n                    className=\"w-full bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 px-4 rounded-lg transition-colors\"\n                  >\n                    {registerMutation.isPending ? \"Creating Account...\" : \"Complete Registration\"}\n                  </Button>\n                </form>\n              </Form>\n              \n              <Button\n                onClick={handleBack}\n                variant=\"ghost\"\n                className=\"mt-4 text-gray-500 hover:text-gray-700 text-sm flex items-center mx-auto\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10969},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/NotificationCenter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Bell, X, Check, Trash2, CheckCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { format } from \"date-fns\";\nimport type { Notification } from \"@shared/schema\";\n\nexport default function NotificationCenter() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Local storage key for client-side notifications\n  const localStorageKey = user ? `notifications_${user.id}` : null;\n\n  // Fetch server notifications\n  const { data: serverNotifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n    retry: false,\n  });\n\n  // Get local notifications from localStorage\n  const [localNotifications, setLocalNotifications] = useState<any[]>([]);\n\n  // Load local notifications on mount\n  useEffect(() => {\n    if (localStorageKey) {\n      const stored = localStorage.getItem(localStorageKey);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setLocalNotifications(Array.isArray(parsed) ? parsed : []);\n        } catch (error) {\n          console.error(\"Error parsing local notifications:\", error);\n          setLocalNotifications([]);\n        }\n      }\n    }\n  }, [localStorageKey]);\n\n  // Combine server and local notifications\n  const allNotifications = [...serverNotifications, ...localNotifications]\n    .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n\n  const unreadCount = allNotifications.filter(n => !n.read).length;\n\n  // Save local notifications to localStorage\n  const saveLocalNotifications = (notifications: any[]) => {\n    if (localStorageKey) {\n      localStorage.setItem(localStorageKey, JSON.stringify(notifications));\n      setLocalNotifications(notifications);\n    }\n  };\n\n  // Mark notification as read\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      // Check if it's a server notification\n      const isServerNotification = serverNotifications.some(n => n.id === notificationId);\n      \n      if (isServerNotification) {\n        const response = await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n        return response.json();\n      } else {\n        // Handle local notification\n        const updated = localNotifications.map(n => \n          n.id === notificationId ? { ...n, read: true } : n\n        );\n        saveLocalNotifications(updated);\n        return { id: notificationId };\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark notification as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete notification\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      // Check if it's a server notification\n      const isServerNotification = serverNotifications.some(n => n.id === notificationId);\n      \n      if (isServerNotification) {\n        const response = await apiRequest(\"DELETE\", `/api/notifications/${notificationId}`);\n        return response.json();\n      } else {\n        // Handle local notification\n        const updated = localNotifications.filter(n => n.id !== notificationId);\n        saveLocalNotifications(updated);\n        return { id: notificationId };\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete notification\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Clear all notifications\n  const clearAllMutation = useMutation({\n    mutationFn: async () => {\n      // Clear server notifications\n      const response = await apiRequest(\"DELETE\", \"/api/notifications\");\n      \n      // Clear local notifications\n      saveLocalNotifications([]);\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n      toast({\n        title: \"Success\",\n        description: \"All notifications cleared\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear notifications\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  const handleDelete = (notificationId: string) => {\n    deleteNotificationMutation.mutate(notificationId);\n  };\n\n  const handleClearAll = () => {\n    clearAllMutation.mutate();\n  };\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"security_purchased\":\n        return \"💰\";\n      case \"payment_received\":\n        return \"✅\";\n      case \"security_listed\":\n        return \"📈\";\n      case \"payment_due\":\n        return \"⏰\";\n      default:\n        return \"📢\";\n    }\n  };\n\n  const getNotificationVariant = (type: string) => {\n    switch (type) {\n      case \"security_purchased\":\n        return \"default\";\n      case \"payment_received\":\n        return \"default\";\n      case \"security_listed\":\n        return \"secondary\";\n      case \"payment_due\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"relative bg-white hover:bg-gray-50 text-gray-700 px-3 py-2 rounded-lg transition-colors\"\n        >\n          <Bell className=\"w-4 h-4\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n            >\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      \n      <PopoverContent className=\"w-96 p-0\" align=\"end\">\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Notifications</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                {unreadCount > 0 && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {unreadCount} unread\n                  </Badge>\n                )}\n                {allNotifications.length > 0 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleClearAll}\n                    disabled={clearAllMutation.isPending}\n                    className=\"text-xs\"\n                  >\n                    <CheckCheck className=\"w-3 h-3 mr-1\" />\n                    Clear All\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500\"></div>\n              </div>\n            ) : allNotifications.length === 0 ? (\n              <div className=\"text-center py-8 px-4\">\n                <Bell className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-sm font-medium text-gray-900 mb-2\">No notifications</h3>\n                <p className=\"text-xs text-gray-500\">You're all caught up!</p>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-96\">\n                <div className=\"p-4 space-y-3\">\n                  {allNotifications.map((notification, index) => (\n                    <div key={notification.id || index}>\n                      <div className={`p-3 rounded-lg border transition-colors ${\n                        notification.read \n                          ? \"bg-gray-50 border-gray-200\" \n                          : \"bg-blue-50 border-blue-200\"\n                      }`}>\n                        <div className=\"flex items-start justify-between space-x-3\">\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <span className=\"text-lg\">{getNotificationIcon(notification.type)}</span>\n                              <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                                {notification.title}\n                              </h4>\n                              <Badge \n                                variant={getNotificationVariant(notification.type)} \n                                className=\"text-xs\"\n                              >\n                                {notification.type.replace('_', ' ')}\n                              </Badge>\n                            </div>\n                            <p className=\"text-xs text-gray-600 mb-2\">\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-gray-400\">\n                              {format(new Date(notification.createdAt || new Date()), \"MMM dd, HH:mm\")}\n                            </p>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-1\">\n                            {!notification.read && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleMarkAsRead(notification.id)}\n                                disabled={markAsReadMutation.isPending}\n                                className=\"h-6 w-6 p-0\"\n                              >\n                                <Check className=\"w-3 h-3\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(notification.id)}\n                              disabled={deleteNotificationMutation.isPending}\n                              className=\"h-6 w-6 p-0 text-red-500 hover:text-red-600\"\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {index < allNotifications.length - 1 && (\n                        <Separator className=\"my-2\" />\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":12772},"client/src/components/EmptyState.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface EmptyStateProps {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n  actionLabel?: string;\n  onAction?: () => void;\n  className?: string;\n}\n\nexport default function EmptyState({\n  icon: Icon,\n  title,\n  description,\n  actionLabel,\n  onAction,\n  className = \"\"\n}: EmptyStateProps) {\n  return (\n    <div className={`empty-state animate-fade-in ${className}`}>\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"w-16 h-16 rounded-full bg-muted/50 flex items-center justify-center\">\n          <Icon className=\"w-8 h-8 text-muted-foreground\" />\n        </div>\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold text-foreground text-balance\">{title}</h3>\n          <p className=\"text-sm text-muted-foreground max-w-md text-balance leading-relaxed\">\n            {description}\n          </p>\n        </div>\n        {actionLabel && onAction && (\n          <Button \n            onClick={onAction}\n            className=\"btn-hover mt-4\"\n          >\n            {actionLabel}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":1205},"client/src/components/LoadingSpinner.tsx":{"content":"import { Loader2 } from \"lucide-react\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport default function LoadingSpinner({ size = \"md\", className = \"\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4\",\n    md: \"w-6 h-6\", \n    lg: \"w-8 h-8\"\n  };\n\n  return (\n    <Loader2 className={`animate-spin ${sizeClasses[size]} ${className}`} />\n  );\n}","size_bytes":403},"client/src/components/SkeletonCard.tsx":{"content":"interface SkeletonCardProps {\n  lines?: number;\n  className?: string;\n}\n\nexport default function SkeletonCard({ lines = 3, className = \"\" }: SkeletonCardProps) {\n  return (\n    <div className={`p-6 border rounded-lg space-y-3 ${className}`}>\n      <div className=\"skeleton h-5 w-3/4\"></div>\n      {Array.from({ length: lines }).map((_, i) => (\n        <div key={i} className={`skeleton h-4 ${i === lines - 1 ? 'w-1/2' : 'w-full'}`}></div>\n      ))}\n      <div className=\"flex space-x-2 pt-2\">\n        <div className=\"skeleton h-8 w-20\"></div>\n        <div className=\"skeleton h-8 w-16\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":623}}}